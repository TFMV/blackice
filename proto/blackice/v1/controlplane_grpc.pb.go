// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: blackice/proto/blackice/v1/controlplane.proto

package blackicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ControlPlaneService_GetSystemStatus_FullMethodName       = "/blackice.v1.ControlPlaneService/GetSystemStatus"
	ControlPlaneService_ManageConfiguration_FullMethodName   = "/blackice.v1.ControlPlaneService/ManageConfiguration"
	ControlPlaneService_ListComponents_FullMethodName        = "/blackice.v1.ControlPlaneService/ListComponents"
	ControlPlaneService_GetAuditHistory_FullMethodName       = "/blackice.v1.ControlPlaneService/GetAuditHistory"
	ControlPlaneService_ExecuteControlCommand_FullMethodName = "/blackice.v1.ControlPlaneService/ExecuteControlCommand"
)

// ControlPlaneServiceClient is the client API for ControlPlaneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ControlPlaneService provides centralized management, configuration, and monitoring
// capabilities for BlackIce while maintaining zero-trust principles and attestation requirements.
type ControlPlaneServiceClient interface {
	// GetSystemStatus retrieves status information for all system components
	GetSystemStatus(ctx context.Context, in *GetSystemStatusRequest, opts ...grpc.CallOption) (*SystemStatusResponse, error)
	// ManageConfiguration handles updates to system configuration
	ManageConfiguration(ctx context.Context, in *ManageConfigurationRequest, opts ...grpc.CallOption) (*ConfigurationResponse, error)
	// ListComponents returns information on all registered system components
	ListComponents(ctx context.Context, in *ListComponentsRequest, opts ...grpc.CallOption) (*ListComponentsResponse, error)
	// GetAuditHistory retrieves audit logs with filtering and pagination
	GetAuditHistory(ctx context.Context, in *GetAuditHistoryRequest, opts ...grpc.CallOption) (*GetAuditHistoryResponse, error)
	// ExecuteControlCommand executes an administrative command on a component
	ExecuteControlCommand(ctx context.Context, in *ExecuteControlCommandRequest, opts ...grpc.CallOption) (*ExecuteControlCommandResponse, error)
}

type controlPlaneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControlPlaneServiceClient(cc grpc.ClientConnInterface) ControlPlaneServiceClient {
	return &controlPlaneServiceClient{cc}
}

func (c *controlPlaneServiceClient) GetSystemStatus(ctx context.Context, in *GetSystemStatusRequest, opts ...grpc.CallOption) (*SystemStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemStatusResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_GetSystemStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) ManageConfiguration(ctx context.Context, in *ManageConfigurationRequest, opts ...grpc.CallOption) (*ConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigurationResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_ManageConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) ListComponents(ctx context.Context, in *ListComponentsRequest, opts ...grpc.CallOption) (*ListComponentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListComponentsResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_ListComponents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) GetAuditHistory(ctx context.Context, in *GetAuditHistoryRequest, opts ...grpc.CallOption) (*GetAuditHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuditHistoryResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_GetAuditHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) ExecuteControlCommand(ctx context.Context, in *ExecuteControlCommandRequest, opts ...grpc.CallOption) (*ExecuteControlCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteControlCommandResponse)
	err := c.cc.Invoke(ctx, ControlPlaneService_ExecuteControlCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlPlaneServiceServer is the server API for ControlPlaneService service.
// All implementations must embed UnimplementedControlPlaneServiceServer
// for forward compatibility.
//
// ControlPlaneService provides centralized management, configuration, and monitoring
// capabilities for BlackIce while maintaining zero-trust principles and attestation requirements.
type ControlPlaneServiceServer interface {
	// GetSystemStatus retrieves status information for all system components
	GetSystemStatus(context.Context, *GetSystemStatusRequest) (*SystemStatusResponse, error)
	// ManageConfiguration handles updates to system configuration
	ManageConfiguration(context.Context, *ManageConfigurationRequest) (*ConfigurationResponse, error)
	// ListComponents returns information on all registered system components
	ListComponents(context.Context, *ListComponentsRequest) (*ListComponentsResponse, error)
	// GetAuditHistory retrieves audit logs with filtering and pagination
	GetAuditHistory(context.Context, *GetAuditHistoryRequest) (*GetAuditHistoryResponse, error)
	// ExecuteControlCommand executes an administrative command on a component
	ExecuteControlCommand(context.Context, *ExecuteControlCommandRequest) (*ExecuteControlCommandResponse, error)
	mustEmbedUnimplementedControlPlaneServiceServer()
}

// UnimplementedControlPlaneServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedControlPlaneServiceServer struct{}

func (UnimplementedControlPlaneServiceServer) GetSystemStatus(context.Context, *GetSystemStatusRequest) (*SystemStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemStatus not implemented")
}
func (UnimplementedControlPlaneServiceServer) ManageConfiguration(context.Context, *ManageConfigurationRequest) (*ConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageConfiguration not implemented")
}
func (UnimplementedControlPlaneServiceServer) ListComponents(context.Context, *ListComponentsRequest) (*ListComponentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComponents not implemented")
}
func (UnimplementedControlPlaneServiceServer) GetAuditHistory(context.Context, *GetAuditHistoryRequest) (*GetAuditHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditHistory not implemented")
}
func (UnimplementedControlPlaneServiceServer) ExecuteControlCommand(context.Context, *ExecuteControlCommandRequest) (*ExecuteControlCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteControlCommand not implemented")
}
func (UnimplementedControlPlaneServiceServer) mustEmbedUnimplementedControlPlaneServiceServer() {}
func (UnimplementedControlPlaneServiceServer) testEmbeddedByValue()                             {}

// UnsafeControlPlaneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlPlaneServiceServer will
// result in compilation errors.
type UnsafeControlPlaneServiceServer interface {
	mustEmbedUnimplementedControlPlaneServiceServer()
}

func RegisterControlPlaneServiceServer(s grpc.ServiceRegistrar, srv ControlPlaneServiceServer) {
	// If the following call pancis, it indicates UnimplementedControlPlaneServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ControlPlaneService_ServiceDesc, srv)
}

func _ControlPlaneService_GetSystemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).GetSystemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_GetSystemStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).GetSystemStatus(ctx, req.(*GetSystemStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_ManageConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).ManageConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_ManageConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).ManageConfiguration(ctx, req.(*ManageConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_ListComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListComponentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).ListComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_ListComponents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).ListComponents(ctx, req.(*ListComponentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_GetAuditHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuditHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).GetAuditHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_GetAuditHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).GetAuditHistory(ctx, req.(*GetAuditHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_ExecuteControlCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteControlCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).ExecuteControlCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlPlaneService_ExecuteControlCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).ExecuteControlCommand(ctx, req.(*ExecuteControlCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ControlPlaneService_ServiceDesc is the grpc.ServiceDesc for ControlPlaneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlPlaneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blackice.v1.ControlPlaneService",
	HandlerType: (*ControlPlaneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemStatus",
			Handler:    _ControlPlaneService_GetSystemStatus_Handler,
		},
		{
			MethodName: "ManageConfiguration",
			Handler:    _ControlPlaneService_ManageConfiguration_Handler,
		},
		{
			MethodName: "ListComponents",
			Handler:    _ControlPlaneService_ListComponents_Handler,
		},
		{
			MethodName: "GetAuditHistory",
			Handler:    _ControlPlaneService_GetAuditHistory_Handler,
		},
		{
			MethodName: "ExecuteControlCommand",
			Handler:    _ControlPlaneService_ExecuteControlCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blackice/proto/blackice/v1/controlplane.proto",
}

const (
	AuthService_AuthenticateUser_FullMethodName           = "/blackice.v1.AuthService/AuthenticateUser"
	AuthService_ValidateToken_FullMethodName              = "/blackice.v1.AuthService/ValidateToken"
	AuthService_AuthorizeOperation_FullMethodName         = "/blackice.v1.AuthService/AuthorizeOperation"
	AuthService_ManageRoles_FullMethodName                = "/blackice.v1.AuthService/ManageRoles"
	AuthService_ManagePermissions_FullMethodName          = "/blackice.v1.AuthService/ManagePermissions"
	AuthService_CreateAttestationChallenge_FullMethodName = "/blackice.v1.AuthService/CreateAttestationChallenge"
	AuthService_VerifyAttestation_FullMethodName          = "/blackice.v1.AuthService/VerifyAttestation"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AuthService provides authentication, authorization, and access control
// for all operations against the BlackIce system.
type AuthServiceClient interface {
	// AuthenticateUser authenticates a user and returns a session token
	AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error)
	// ValidateToken validates a session token and returns claims
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*TokenValidationResponse, error)
	// AuthorizeOperation checks if a user has permission for a specific operation
	AuthorizeOperation(ctx context.Context, in *AuthorizeOperationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	// ManageRoles creates, updates, or deletes roles
	ManageRoles(ctx context.Context, in *ManageRolesRequest, opts ...grpc.CallOption) (*ManageRolesResponse, error)
	// ManagePermissions assigns or revokes permissions for roles
	ManagePermissions(ctx context.Context, in *ManagePermissionsRequest, opts ...grpc.CallOption) (*ManagePermissionsResponse, error)
	// CreateAttestationChallenge creates a challenge for hardware attestation
	CreateAttestationChallenge(ctx context.Context, in *CreateAttestationChallengeRequest, opts ...grpc.CallOption) (*AttestationChallengeResponse, error)
	// VerifyAttestation verifies the response to an attestation challenge
	VerifyAttestation(ctx context.Context, in *VerifyAttestationRequest, opts ...grpc.CallOption) (*VerifyAttestationResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticationResponse)
	err := c.cc.Invoke(ctx, AuthService_AuthenticateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*TokenValidationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenValidationResponse)
	err := c.cc.Invoke(ctx, AuthService_ValidateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AuthorizeOperation(ctx context.Context, in *AuthorizeOperationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthorizationResponse)
	err := c.cc.Invoke(ctx, AuthService_AuthorizeOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ManageRoles(ctx context.Context, in *ManageRolesRequest, opts ...grpc.CallOption) (*ManageRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManageRolesResponse)
	err := c.cc.Invoke(ctx, AuthService_ManageRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ManagePermissions(ctx context.Context, in *ManagePermissionsRequest, opts ...grpc.CallOption) (*ManagePermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManagePermissionsResponse)
	err := c.cc.Invoke(ctx, AuthService_ManagePermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateAttestationChallenge(ctx context.Context, in *CreateAttestationChallengeRequest, opts ...grpc.CallOption) (*AttestationChallengeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttestationChallengeResponse)
	err := c.cc.Invoke(ctx, AuthService_CreateAttestationChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyAttestation(ctx context.Context, in *VerifyAttestationRequest, opts ...grpc.CallOption) (*VerifyAttestationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyAttestationResponse)
	err := c.cc.Invoke(ctx, AuthService_VerifyAttestation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility.
//
// AuthService provides authentication, authorization, and access control
// for all operations against the BlackIce system.
type AuthServiceServer interface {
	// AuthenticateUser authenticates a user and returns a session token
	AuthenticateUser(context.Context, *AuthenticateUserRequest) (*AuthenticationResponse, error)
	// ValidateToken validates a session token and returns claims
	ValidateToken(context.Context, *ValidateTokenRequest) (*TokenValidationResponse, error)
	// AuthorizeOperation checks if a user has permission for a specific operation
	AuthorizeOperation(context.Context, *AuthorizeOperationRequest) (*AuthorizationResponse, error)
	// ManageRoles creates, updates, or deletes roles
	ManageRoles(context.Context, *ManageRolesRequest) (*ManageRolesResponse, error)
	// ManagePermissions assigns or revokes permissions for roles
	ManagePermissions(context.Context, *ManagePermissionsRequest) (*ManagePermissionsResponse, error)
	// CreateAttestationChallenge creates a challenge for hardware attestation
	CreateAttestationChallenge(context.Context, *CreateAttestationChallengeRequest) (*AttestationChallengeResponse, error)
	// VerifyAttestation verifies the response to an attestation challenge
	VerifyAttestation(context.Context, *VerifyAttestationRequest) (*VerifyAttestationResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) AuthenticateUser(context.Context, *AuthenticateUserRequest) (*AuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateUser not implemented")
}
func (UnimplementedAuthServiceServer) ValidateToken(context.Context, *ValidateTokenRequest) (*TokenValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedAuthServiceServer) AuthorizeOperation(context.Context, *AuthorizeOperationRequest) (*AuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeOperation not implemented")
}
func (UnimplementedAuthServiceServer) ManageRoles(context.Context, *ManageRolesRequest) (*ManageRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageRoles not implemented")
}
func (UnimplementedAuthServiceServer) ManagePermissions(context.Context, *ManagePermissionsRequest) (*ManagePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManagePermissions not implemented")
}
func (UnimplementedAuthServiceServer) CreateAttestationChallenge(context.Context, *CreateAttestationChallengeRequest) (*AttestationChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttestationChallenge not implemented")
}
func (UnimplementedAuthServiceServer) VerifyAttestation(context.Context, *VerifyAttestationRequest) (*VerifyAttestationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAttestation not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}
func (UnimplementedAuthServiceServer) testEmbeddedByValue()                     {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_AuthenticateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthenticateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AuthenticateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthenticateUser(ctx, req.(*AuthenticateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ValidateToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AuthorizeOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthorizeOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AuthorizeOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthorizeOperation(ctx, req.(*AuthorizeOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ManageRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ManageRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ManageRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ManageRoles(ctx, req.(*ManageRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ManagePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ManagePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ManagePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ManagePermissions(ctx, req.(*ManagePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateAttestationChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttestationChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateAttestationChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateAttestationChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateAttestationChallenge(ctx, req.(*CreateAttestationChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyAttestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAttestationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyAttestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_VerifyAttestation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyAttestation(ctx, req.(*VerifyAttestationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blackice.v1.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateUser",
			Handler:    _AuthService_AuthenticateUser_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _AuthService_ValidateToken_Handler,
		},
		{
			MethodName: "AuthorizeOperation",
			Handler:    _AuthService_AuthorizeOperation_Handler,
		},
		{
			MethodName: "ManageRoles",
			Handler:    _AuthService_ManageRoles_Handler,
		},
		{
			MethodName: "ManagePermissions",
			Handler:    _AuthService_ManagePermissions_Handler,
		},
		{
			MethodName: "CreateAttestationChallenge",
			Handler:    _AuthService_CreateAttestationChallenge_Handler,
		},
		{
			MethodName: "VerifyAttestation",
			Handler:    _AuthService_VerifyAttestation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blackice/proto/blackice/v1/controlplane.proto",
}
