// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: blackice/proto/blackice/v1/ingestion.proto

package blackicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IngestGate_PutBatch_FullMethodName            = "/blackice.v1.IngestGate/PutBatch"
	IngestGate_GetSourceTrustScore_FullMethodName = "/blackice.v1.IngestGate/GetSourceTrustScore"
	IngestGate_RegisterSource_FullMethodName      = "/blackice.v1.IngestGate/RegisterSource"
	IngestGate_UpdateSourceTrust_FullMethodName   = "/blackice.v1.IngestGate/UpdateSourceTrust"
	IngestGate_GetIngestionStats_FullMethodName   = "/blackice.v1.IngestGate/GetIngestionStats"
)

// IngestGateClient is the client API for IngestGate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// IngestGate Service (Zero-Trust Ingestion Layer)
// Handles secure ingestion of data streams using Apache Arrow Flight semantics,
// cryptographic verification (HMAC, PQC signatures), and dynamic trust scoring.
type IngestGateClient interface {
	// PutBatch ingests a stream of FlightData messages.
	// Each message in the stream represents a chunk of a larger batch.
	// The service performs real-time cryptographic verification (HMAC in metadata,
	// source attestation) and assigns a trust score.
	// Implements Merkle Stream Verification for sub-batch integrity.
	PutBatch(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FlightDataChunk, BatchAck], error)
	// GetSourceTrustScore retrieves the current and historical trust score for a data source.
	GetSourceTrustScore(ctx context.Context, in *SourceTrustRequest, opts ...grpc.CallOption) (*SourceTrustResponse, error)
	// RegisterSource registers a new data source with the IngestGate.
	// This includes its public key for attestation verification and initial trust parameters.
	RegisterSource(ctx context.Context, in *SourceRegistrationRequest, opts ...grpc.CallOption) (*SourceRegistrationResponse, error)
	// UpdateSourceTrust manually updates trust parameters for a data source (admin operation).
	UpdateSourceTrust(ctx context.Context, in *UpdateTrustRequest, opts ...grpc.CallOption) (*SourceTrustResponse, error)
	// GetIngestionStats provides real-time statistics for the ingestion service.
	GetIngestionStats(ctx context.Context, in *IngestionStatsRequest, opts ...grpc.CallOption) (*IngestionStatsResponse, error)
}

type ingestGateClient struct {
	cc grpc.ClientConnInterface
}

func NewIngestGateClient(cc grpc.ClientConnInterface) IngestGateClient {
	return &ingestGateClient{cc}
}

func (c *ingestGateClient) PutBatch(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FlightDataChunk, BatchAck], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IngestGate_ServiceDesc.Streams[0], IngestGate_PutBatch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FlightDataChunk, BatchAck]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IngestGate_PutBatchClient = grpc.BidiStreamingClient[FlightDataChunk, BatchAck]

func (c *ingestGateClient) GetSourceTrustScore(ctx context.Context, in *SourceTrustRequest, opts ...grpc.CallOption) (*SourceTrustResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SourceTrustResponse)
	err := c.cc.Invoke(ctx, IngestGate_GetSourceTrustScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestGateClient) RegisterSource(ctx context.Context, in *SourceRegistrationRequest, opts ...grpc.CallOption) (*SourceRegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SourceRegistrationResponse)
	err := c.cc.Invoke(ctx, IngestGate_RegisterSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestGateClient) UpdateSourceTrust(ctx context.Context, in *UpdateTrustRequest, opts ...grpc.CallOption) (*SourceTrustResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SourceTrustResponse)
	err := c.cc.Invoke(ctx, IngestGate_UpdateSourceTrust_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestGateClient) GetIngestionStats(ctx context.Context, in *IngestionStatsRequest, opts ...grpc.CallOption) (*IngestionStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestionStatsResponse)
	err := c.cc.Invoke(ctx, IngestGate_GetIngestionStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngestGateServer is the server API for IngestGate service.
// All implementations must embed UnimplementedIngestGateServer
// for forward compatibility.
//
// IngestGate Service (Zero-Trust Ingestion Layer)
// Handles secure ingestion of data streams using Apache Arrow Flight semantics,
// cryptographic verification (HMAC, PQC signatures), and dynamic trust scoring.
type IngestGateServer interface {
	// PutBatch ingests a stream of FlightData messages.
	// Each message in the stream represents a chunk of a larger batch.
	// The service performs real-time cryptographic verification (HMAC in metadata,
	// source attestation) and assigns a trust score.
	// Implements Merkle Stream Verification for sub-batch integrity.
	PutBatch(grpc.BidiStreamingServer[FlightDataChunk, BatchAck]) error
	// GetSourceTrustScore retrieves the current and historical trust score for a data source.
	GetSourceTrustScore(context.Context, *SourceTrustRequest) (*SourceTrustResponse, error)
	// RegisterSource registers a new data source with the IngestGate.
	// This includes its public key for attestation verification and initial trust parameters.
	RegisterSource(context.Context, *SourceRegistrationRequest) (*SourceRegistrationResponse, error)
	// UpdateSourceTrust manually updates trust parameters for a data source (admin operation).
	UpdateSourceTrust(context.Context, *UpdateTrustRequest) (*SourceTrustResponse, error)
	// GetIngestionStats provides real-time statistics for the ingestion service.
	GetIngestionStats(context.Context, *IngestionStatsRequest) (*IngestionStatsResponse, error)
	mustEmbedUnimplementedIngestGateServer()
}

// UnimplementedIngestGateServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIngestGateServer struct{}

func (UnimplementedIngestGateServer) PutBatch(grpc.BidiStreamingServer[FlightDataChunk, BatchAck]) error {
	return status.Errorf(codes.Unimplemented, "method PutBatch not implemented")
}
func (UnimplementedIngestGateServer) GetSourceTrustScore(context.Context, *SourceTrustRequest) (*SourceTrustResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceTrustScore not implemented")
}
func (UnimplementedIngestGateServer) RegisterSource(context.Context, *SourceRegistrationRequest) (*SourceRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSource not implemented")
}
func (UnimplementedIngestGateServer) UpdateSourceTrust(context.Context, *UpdateTrustRequest) (*SourceTrustResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSourceTrust not implemented")
}
func (UnimplementedIngestGateServer) GetIngestionStats(context.Context, *IngestionStatsRequest) (*IngestionStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIngestionStats not implemented")
}
func (UnimplementedIngestGateServer) mustEmbedUnimplementedIngestGateServer() {}
func (UnimplementedIngestGateServer) testEmbeddedByValue()                    {}

// UnsafeIngestGateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngestGateServer will
// result in compilation errors.
type UnsafeIngestGateServer interface {
	mustEmbedUnimplementedIngestGateServer()
}

func RegisterIngestGateServer(s grpc.ServiceRegistrar, srv IngestGateServer) {
	// If the following call pancis, it indicates UnimplementedIngestGateServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IngestGate_ServiceDesc, srv)
}

func _IngestGate_PutBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IngestGateServer).PutBatch(&grpc.GenericServerStream[FlightDataChunk, BatchAck]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IngestGate_PutBatchServer = grpc.BidiStreamingServer[FlightDataChunk, BatchAck]

func _IngestGate_GetSourceTrustScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceTrustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestGateServer).GetSourceTrustScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestGate_GetSourceTrustScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestGateServer).GetSourceTrustScore(ctx, req.(*SourceTrustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestGate_RegisterSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestGateServer).RegisterSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestGate_RegisterSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestGateServer).RegisterSource(ctx, req.(*SourceRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestGate_UpdateSourceTrust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestGateServer).UpdateSourceTrust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestGate_UpdateSourceTrust_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestGateServer).UpdateSourceTrust(ctx, req.(*UpdateTrustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestGate_GetIngestionStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestionStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestGateServer).GetIngestionStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestGate_GetIngestionStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestGateServer).GetIngestionStats(ctx, req.(*IngestionStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IngestGate_ServiceDesc is the grpc.ServiceDesc for IngestGate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngestGate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blackice.v1.IngestGate",
	HandlerType: (*IngestGateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSourceTrustScore",
			Handler:    _IngestGate_GetSourceTrustScore_Handler,
		},
		{
			MethodName: "RegisterSource",
			Handler:    _IngestGate_RegisterSource_Handler,
		},
		{
			MethodName: "UpdateSourceTrust",
			Handler:    _IngestGate_UpdateSourceTrust_Handler,
		},
		{
			MethodName: "GetIngestionStats",
			Handler:    _IngestGate_GetIngestionStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutBatch",
			Handler:       _IngestGate_PutBatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "blackice/proto/blackice/v1/ingestion.proto",
}
