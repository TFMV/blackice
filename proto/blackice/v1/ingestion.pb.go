// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: blackice/proto/blackice/v1/ingestion.proto

package blackicev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FlightDataChunk represents a piece of an Arrow Flight data batch.
// Based on requirements for Arrow Flight, HMAC in metadata, and Merkle Stream Verification.
type FlightDataChunk struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	BatchMetadata          *BatchMetadata         `protobuf:"bytes,1,opt,name=batch_metadata,json=batchMetadata,proto3" json:"batch_metadata,omitempty"`                              // Shared metadata for the entire batch
	ArrowPayload           []byte                 `protobuf:"bytes,2,opt,name=arrow_payload,json=arrowPayload,proto3" json:"arrow_payload,omitempty"`                                 // Arrow columnar data payload for this chunk
	HmacSignature          []byte                 `protobuf:"bytes,3,opt,name=hmac_signature,json=hmacSignature,proto3" json:"hmac_signature,omitempty"`                              // HMAC (e.g., SHA256-HMAC) of arrow_payload + critical metadata
	HmacAlgorithm          string                 `protobuf:"bytes,4,opt,name=hmac_algorithm,json=hmacAlgorithm,proto3" json:"hmac_algorithm,omitempty"`                              // Algorithm used for HMAC
	ChunkSourceAttestation *Attestation           `protobuf:"bytes,5,opt,name=chunk_source_attestation,json=chunkSourceAttestation,proto3" json:"chunk_source_attestation,omitempty"` // Attestation for this specific chunk, if applicable
	SequenceNumber         int64                  `protobuf:"varint,6,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`                          // Sequence number of this chunk within the batch
	IsLastChunk            bool                   `protobuf:"varint,7,opt,name=is_last_chunk,json=isLastChunk,proto3" json:"is_last_chunk,omitempty"`                                 // True if this is the final chunk of the batch
	MerkleStreamProof      *MerkleProof           `protobuf:"bytes,8,opt,name=merkle_stream_proof,json=merkleStreamProof,proto3" json:"merkle_stream_proof,omitempty"`                // Proof for Merkle Stream Verification (if applicable)
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *FlightDataChunk) Reset() {
	*x = FlightDataChunk{}
	mi := &file_blackice_proto_blackice_v1_ingestion_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlightDataChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightDataChunk) ProtoMessage() {}

func (x *FlightDataChunk) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ingestion_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightDataChunk.ProtoReflect.Descriptor instead.
func (*FlightDataChunk) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ingestion_proto_rawDescGZIP(), []int{0}
}

func (x *FlightDataChunk) GetBatchMetadata() *BatchMetadata {
	if x != nil {
		return x.BatchMetadata
	}
	return nil
}

func (x *FlightDataChunk) GetArrowPayload() []byte {
	if x != nil {
		return x.ArrowPayload
	}
	return nil
}

func (x *FlightDataChunk) GetHmacSignature() []byte {
	if x != nil {
		return x.HmacSignature
	}
	return nil
}

func (x *FlightDataChunk) GetHmacAlgorithm() string {
	if x != nil {
		return x.HmacAlgorithm
	}
	return ""
}

func (x *FlightDataChunk) GetChunkSourceAttestation() *Attestation {
	if x != nil {
		return x.ChunkSourceAttestation
	}
	return nil
}

func (x *FlightDataChunk) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *FlightDataChunk) GetIsLastChunk() bool {
	if x != nil {
		return x.IsLastChunk
	}
	return false
}

func (x *FlightDataChunk) GetMerkleStreamProof() *MerkleProof {
	if x != nil {
		return x.MerkleStreamProof
	}
	return nil
}

// BatchAck is sent back to the client for each processed FlightDataChunk or at the end of a batch.
type BatchAck struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BatchId            string                 `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	ChunkId            string                 `protobuf:"bytes,2,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"` // Or a general receipt_id if acknowledging the whole batch
	Status             *Status                `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	AssignedTrustScore *TrustScore            `protobuf:"bytes,4,opt,name=assigned_trust_score,json=assignedTrustScore,proto3" json:"assigned_trust_score,omitempty"` // Trust score after processing this chunk/batch
	ArrivalAttestation *Attestation           `protobuf:"bytes,5,opt,name=arrival_attestation,json=arrivalAttestation,proto3" json:"arrival_attestation,omitempty"`   // BlackIce's attestation of receipt and verification
	ProcessedAtUnixNs  int64                  `protobuf:"varint,6,opt,name=processed_at_unix_ns,json=processedAtUnixNs,proto3" json:"processed_at_unix_ns,omitempty"`
	ProcessingDetails  map[string]string      `protobuf:"bytes,7,rep,name=processing_details,json=processingDetails,proto3" json:"processing_details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // e.g., verification steps passed/failed
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BatchAck) Reset() {
	*x = BatchAck{}
	mi := &file_blackice_proto_blackice_v1_ingestion_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAck) ProtoMessage() {}

func (x *BatchAck) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ingestion_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAck.ProtoReflect.Descriptor instead.
func (*BatchAck) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ingestion_proto_rawDescGZIP(), []int{1}
}

func (x *BatchAck) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *BatchAck) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *BatchAck) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BatchAck) GetAssignedTrustScore() *TrustScore {
	if x != nil {
		return x.AssignedTrustScore
	}
	return nil
}

func (x *BatchAck) GetArrivalAttestation() *Attestation {
	if x != nil {
		return x.ArrivalAttestation
	}
	return nil
}

func (x *BatchAck) GetProcessedAtUnixNs() int64 {
	if x != nil {
		return x.ProcessedAtUnixNs
	}
	return 0
}

func (x *BatchAck) GetProcessingDetails() map[string]string {
	if x != nil {
		return x.ProcessingDetails
	}
	return nil
}

type SourceTrustRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SourceId       string                 `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	IncludeHistory bool                   `protobuf:"varint,2,opt,name=include_history,json=includeHistory,proto3" json:"include_history,omitempty"`
	HistoryLimit   int32                  `protobuf:"varint,3,opt,name=history_limit,json=historyLimit,proto3" json:"history_limit,omitempty"` // Max number of historical scores to return
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SourceTrustRequest) Reset() {
	*x = SourceTrustRequest{}
	mi := &file_blackice_proto_blackice_v1_ingestion_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceTrustRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceTrustRequest) ProtoMessage() {}

func (x *SourceTrustRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ingestion_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceTrustRequest.ProtoReflect.Descriptor instead.
func (*SourceTrustRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ingestion_proto_rawDescGZIP(), []int{2}
}

func (x *SourceTrustRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *SourceTrustRequest) GetIncludeHistory() bool {
	if x != nil {
		return x.IncludeHistory
	}
	return false
}

func (x *SourceTrustRequest) GetHistoryLimit() int32 {
	if x != nil {
		return x.HistoryLimit
	}
	return 0
}

type SourceTrustResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	SourceId              string                 `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	CurrentTrustScore     *TrustScore            `protobuf:"bytes,2,opt,name=current_trust_score,json=currentTrustScore,proto3" json:"current_trust_score,omitempty"`
	HistoricalTrustScores []*TrustScore          `protobuf:"bytes,3,rep,name=historical_trust_scores,json=historicalTrustScores,proto3" json:"historical_trust_scores,omitempty"`
	Status                *Status                `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SourceTrustResponse) Reset() {
	*x = SourceTrustResponse{}
	mi := &file_blackice_proto_blackice_v1_ingestion_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceTrustResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceTrustResponse) ProtoMessage() {}

func (x *SourceTrustResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ingestion_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceTrustResponse.ProtoReflect.Descriptor instead.
func (*SourceTrustResponse) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ingestion_proto_rawDescGZIP(), []int{3}
}

func (x *SourceTrustResponse) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *SourceTrustResponse) GetCurrentTrustScore() *TrustScore {
	if x != nil {
		return x.CurrentTrustScore
	}
	return nil
}

func (x *SourceTrustResponse) GetHistoricalTrustScores() []*TrustScore {
	if x != nil {
		return x.HistoricalTrustScores
	}
	return nil
}

func (x *SourceTrustResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type SourceRegistrationRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SourceId             string                 `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"` // User-defined unique ID for the source
	Description          string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	PublicKeyDer         []byte                 `protobuf:"bytes,3,opt,name=public_key_der,json=publicKeyDer,proto3" json:"public_key_der,omitempty"`                                                                               // DER-encoded public key (e.g., Dilithium)
	KeyAlgorithm         string                 `protobuf:"bytes,4,opt,name=key_algorithm,json=keyAlgorithm,proto3" json:"key_algorithm,omitempty"`                                                                                 // e.g., "Dilithium3"
	InitialTrustScore    int32                  `protobuf:"varint,5,opt,name=initial_trust_score,json=initialTrustScore,proto3" json:"initial_trust_score,omitempty"`                                                               // Default: 50
	SourceMetadata       map[string]string      `protobuf:"bytes,6,rep,name=source_metadata,json=sourceMetadata,proto3" json:"source_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // e.g., type, location, owner
	ExpectedContentTypes []string               `protobuf:"bytes,7,rep,name=expected_content_types,json=expectedContentTypes,proto3" json:"expected_content_types,omitempty"`
	AdminAttestation     *Attestation           `protobuf:"bytes,8,opt,name=admin_attestation,json=adminAttestation,proto3" json:"admin_attestation,omitempty"` // Attestation from an admin authorizing this registration
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SourceRegistrationRequest) Reset() {
	*x = SourceRegistrationRequest{}
	mi := &file_blackice_proto_blackice_v1_ingestion_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceRegistrationRequest) ProtoMessage() {}

func (x *SourceRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ingestion_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceRegistrationRequest.ProtoReflect.Descriptor instead.
func (*SourceRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ingestion_proto_rawDescGZIP(), []int{4}
}

func (x *SourceRegistrationRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *SourceRegistrationRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SourceRegistrationRequest) GetPublicKeyDer() []byte {
	if x != nil {
		return x.PublicKeyDer
	}
	return nil
}

func (x *SourceRegistrationRequest) GetKeyAlgorithm() string {
	if x != nil {
		return x.KeyAlgorithm
	}
	return ""
}

func (x *SourceRegistrationRequest) GetInitialTrustScore() int32 {
	if x != nil {
		return x.InitialTrustScore
	}
	return 0
}

func (x *SourceRegistrationRequest) GetSourceMetadata() map[string]string {
	if x != nil {
		return x.SourceMetadata
	}
	return nil
}

func (x *SourceRegistrationRequest) GetExpectedContentTypes() []string {
	if x != nil {
		return x.ExpectedContentTypes
	}
	return nil
}

func (x *SourceRegistrationRequest) GetAdminAttestation() *Attestation {
	if x != nil {
		return x.AdminAttestation
	}
	return nil
}

type SourceRegistrationResponse struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	SourceId                  string                 `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	Status                    *Status                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	RegisteredAtUnixNs        int64                  `protobuf:"varint,3,opt,name=registered_at_unix_ns,json=registeredAtUnixNs,proto3" json:"registered_at_unix_ns,omitempty"`
	InitialTrustScoreAssigned *TrustScore            `protobuf:"bytes,4,opt,name=initial_trust_score_assigned,json=initialTrustScoreAssigned,proto3" json:"initial_trust_score_assigned,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *SourceRegistrationResponse) Reset() {
	*x = SourceRegistrationResponse{}
	mi := &file_blackice_proto_blackice_v1_ingestion_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceRegistrationResponse) ProtoMessage() {}

func (x *SourceRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ingestion_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceRegistrationResponse.ProtoReflect.Descriptor instead.
func (*SourceRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ingestion_proto_rawDescGZIP(), []int{5}
}

func (x *SourceRegistrationResponse) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *SourceRegistrationResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SourceRegistrationResponse) GetRegisteredAtUnixNs() int64 {
	if x != nil {
		return x.RegisteredAtUnixNs
	}
	return 0
}

func (x *SourceRegistrationResponse) GetInitialTrustScoreAssigned() *TrustScore {
	if x != nil {
		return x.InitialTrustScoreAssigned
	}
	return nil
}

type UpdateTrustRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SourceId         string                 `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	NewTrustScore    int32                  `protobuf:"varint,2,opt,name=new_trust_score,json=newTrustScore,proto3" json:"new_trust_score,omitempty"` // Absolute new score, or a delta
	IsDelta          bool                   `protobuf:"varint,3,opt,name=is_delta,json=isDelta,proto3" json:"is_delta,omitempty"`                     // If true, new_trust_score is added to current
	Reason           string                 `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	AdminId          string                 `protobuf:"bytes,5,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`                            // ID of the admin performing the update
	AdminAttestation *Attestation           `protobuf:"bytes,6,opt,name=admin_attestation,json=adminAttestation,proto3" json:"admin_attestation,omitempty"` // Admin's attestation for this action
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UpdateTrustRequest) Reset() {
	*x = UpdateTrustRequest{}
	mi := &file_blackice_proto_blackice_v1_ingestion_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTrustRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTrustRequest) ProtoMessage() {}

func (x *UpdateTrustRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ingestion_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTrustRequest.ProtoReflect.Descriptor instead.
func (*UpdateTrustRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ingestion_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateTrustRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *UpdateTrustRequest) GetNewTrustScore() int32 {
	if x != nil {
		return x.NewTrustScore
	}
	return 0
}

func (x *UpdateTrustRequest) GetIsDelta() bool {
	if x != nil {
		return x.IsDelta
	}
	return false
}

func (x *UpdateTrustRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *UpdateTrustRequest) GetAdminId() string {
	if x != nil {
		return x.AdminId
	}
	return ""
}

func (x *UpdateTrustRequest) GetAdminAttestation() *Attestation {
	if x != nil {
		return x.AdminAttestation
	}
	return nil
}

type IngestionStatsRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	IncludePerSourceStats bool                   `protobuf:"varint,1,opt,name=include_per_source_stats,json=includePerSourceStats,proto3" json:"include_per_source_stats,omitempty"`
	SourceIdsFilter       []string               `protobuf:"bytes,2,rep,name=source_ids_filter,json=sourceIdsFilter,proto3" json:"source_ids_filter,omitempty"` // If per-source, filter by these IDs
	WindowSeconds         int32                  `protobuf:"varint,3,opt,name=window_seconds,json=windowSeconds,proto3" json:"window_seconds,omitempty"`        // Time window for stats (e.g., last 60s)
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *IngestionStatsRequest) Reset() {
	*x = IngestionStatsRequest{}
	mi := &file_blackice_proto_blackice_v1_ingestion_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestionStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestionStatsRequest) ProtoMessage() {}

func (x *IngestionStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ingestion_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestionStatsRequest.ProtoReflect.Descriptor instead.
func (*IngestionStatsRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ingestion_proto_rawDescGZIP(), []int{7}
}

func (x *IngestionStatsRequest) GetIncludePerSourceStats() bool {
	if x != nil {
		return x.IncludePerSourceStats
	}
	return false
}

func (x *IngestionStatsRequest) GetSourceIdsFilter() []string {
	if x != nil {
		return x.SourceIdsFilter
	}
	return nil
}

func (x *IngestionStatsRequest) GetWindowSeconds() int32 {
	if x != nil {
		return x.WindowSeconds
	}
	return 0
}

type IngestionStatsResponse struct {
	state                   protoimpl.MessageState           `protogen:"open.v1"`
	Status                  *Status                          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	TotalBatchesProcessed   int64                            `protobuf:"varint,2,opt,name=total_batches_processed,json=totalBatchesProcessed,proto3" json:"total_batches_processed,omitempty"`
	TotalDataIngestedBytes  int64                            `protobuf:"varint,3,opt,name=total_data_ingested_bytes,json=totalDataIngestedBytes,proto3" json:"total_data_ingested_bytes,omitempty"`
	AverageLatencyMs        float64                          `protobuf:"fixed64,4,opt,name=average_latency_ms,json=averageLatencyMs,proto3" json:"average_latency_ms,omitempty"`
	P95LatencyMs            float64                          `protobuf:"fixed64,5,opt,name=p95_latency_ms,json=p95LatencyMs,proto3" json:"p95_latency_ms,omitempty"`
	ErrorRatePercent        float64                          `protobuf:"fixed64,6,opt,name=error_rate_percent,json=errorRatePercent,proto3" json:"error_rate_percent,omitempty"`
	ActiveConnections       int32                            `protobuf:"varint,7,opt,name=active_connections,json=activeConnections,proto3" json:"active_connections,omitempty"`
	PerSourceStats          map[string]*SourceIngestionStats `protobuf:"bytes,8,rep,name=per_source_stats,json=perSourceStats,proto3" json:"per_source_stats,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ServiceHealth           *NodeHealth                      `protobuf:"bytes,9,opt,name=service_health,json=serviceHealth,proto3" json:"service_health,omitempty"`
	ReportGeneratedAtUnixNs int64                            `protobuf:"varint,10,opt,name=report_generated_at_unix_ns,json=reportGeneratedAtUnixNs,proto3" json:"report_generated_at_unix_ns,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *IngestionStatsResponse) Reset() {
	*x = IngestionStatsResponse{}
	mi := &file_blackice_proto_blackice_v1_ingestion_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestionStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestionStatsResponse) ProtoMessage() {}

func (x *IngestionStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ingestion_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestionStatsResponse.ProtoReflect.Descriptor instead.
func (*IngestionStatsResponse) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ingestion_proto_rawDescGZIP(), []int{8}
}

func (x *IngestionStatsResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *IngestionStatsResponse) GetTotalBatchesProcessed() int64 {
	if x != nil {
		return x.TotalBatchesProcessed
	}
	return 0
}

func (x *IngestionStatsResponse) GetTotalDataIngestedBytes() int64 {
	if x != nil {
		return x.TotalDataIngestedBytes
	}
	return 0
}

func (x *IngestionStatsResponse) GetAverageLatencyMs() float64 {
	if x != nil {
		return x.AverageLatencyMs
	}
	return 0
}

func (x *IngestionStatsResponse) GetP95LatencyMs() float64 {
	if x != nil {
		return x.P95LatencyMs
	}
	return 0
}

func (x *IngestionStatsResponse) GetErrorRatePercent() float64 {
	if x != nil {
		return x.ErrorRatePercent
	}
	return 0
}

func (x *IngestionStatsResponse) GetActiveConnections() int32 {
	if x != nil {
		return x.ActiveConnections
	}
	return 0
}

func (x *IngestionStatsResponse) GetPerSourceStats() map[string]*SourceIngestionStats {
	if x != nil {
		return x.PerSourceStats
	}
	return nil
}

func (x *IngestionStatsResponse) GetServiceHealth() *NodeHealth {
	if x != nil {
		return x.ServiceHealth
	}
	return nil
}

func (x *IngestionStatsResponse) GetReportGeneratedAtUnixNs() int64 {
	if x != nil {
		return x.ReportGeneratedAtUnixNs
	}
	return 0
}

type SourceIngestionStats struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SourceId           string                 `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	BatchesProcessed   int64                  `protobuf:"varint,2,opt,name=batches_processed,json=batchesProcessed,proto3" json:"batches_processed,omitempty"`
	DataIngestedBytes  int64                  `protobuf:"varint,3,opt,name=data_ingested_bytes,json=dataIngestedBytes,proto3" json:"data_ingested_bytes,omitempty"`
	AverageTrustScore  float64                `protobuf:"fixed64,4,opt,name=average_trust_score,json=averageTrustScore,proto3" json:"average_trust_score,omitempty"`
	ValidationFailures int64                  `protobuf:"varint,5,opt,name=validation_failures,json=validationFailures,proto3" json:"validation_failures,omitempty"`
	AverageLatencyMs   float64                `protobuf:"fixed64,6,opt,name=average_latency_ms,json=averageLatencyMs,proto3" json:"average_latency_ms,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SourceIngestionStats) Reset() {
	*x = SourceIngestionStats{}
	mi := &file_blackice_proto_blackice_v1_ingestion_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceIngestionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceIngestionStats) ProtoMessage() {}

func (x *SourceIngestionStats) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ingestion_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceIngestionStats.ProtoReflect.Descriptor instead.
func (*SourceIngestionStats) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ingestion_proto_rawDescGZIP(), []int{9}
}

func (x *SourceIngestionStats) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *SourceIngestionStats) GetBatchesProcessed() int64 {
	if x != nil {
		return x.BatchesProcessed
	}
	return 0
}

func (x *SourceIngestionStats) GetDataIngestedBytes() int64 {
	if x != nil {
		return x.DataIngestedBytes
	}
	return 0
}

func (x *SourceIngestionStats) GetAverageTrustScore() float64 {
	if x != nil {
		return x.AverageTrustScore
	}
	return 0
}

func (x *SourceIngestionStats) GetValidationFailures() int64 {
	if x != nil {
		return x.ValidationFailures
	}
	return 0
}

func (x *SourceIngestionStats) GetAverageLatencyMs() float64 {
	if x != nil {
		return x.AverageLatencyMs
	}
	return 0
}

var File_blackice_proto_blackice_v1_ingestion_proto protoreflect.FileDescriptor

const file_blackice_proto_blackice_v1_ingestion_proto_rawDesc = "" +
	"\n" +
	"*blackice/proto/blackice/v1/ingestion.proto\x12\vblackice.v1\x1a'blackice/proto/blackice/v1/common.proto\"\xb2\x03\n" +
	"\x0fFlightDataChunk\x12A\n" +
	"\x0ebatch_metadata\x18\x01 \x01(\v2\x1a.blackice.v1.BatchMetadataR\rbatchMetadata\x12#\n" +
	"\rarrow_payload\x18\x02 \x01(\fR\farrowPayload\x12%\n" +
	"\x0ehmac_signature\x18\x03 \x01(\fR\rhmacSignature\x12%\n" +
	"\x0ehmac_algorithm\x18\x04 \x01(\tR\rhmacAlgorithm\x12R\n" +
	"\x18chunk_source_attestation\x18\x05 \x01(\v2\x18.blackice.v1.AttestationR\x16chunkSourceAttestation\x12'\n" +
	"\x0fsequence_number\x18\x06 \x01(\x03R\x0esequenceNumber\x12\"\n" +
	"\ris_last_chunk\x18\a \x01(\bR\visLastChunk\x12H\n" +
	"\x13merkle_stream_proof\x18\b \x01(\v2\x18.blackice.v1.MerkleProofR\x11merkleStreamProof\"\xd7\x03\n" +
	"\bBatchAck\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\tR\abatchId\x12\x19\n" +
	"\bchunk_id\x18\x02 \x01(\tR\achunkId\x12+\n" +
	"\x06status\x18\x03 \x01(\v2\x13.blackice.v1.StatusR\x06status\x12I\n" +
	"\x14assigned_trust_score\x18\x04 \x01(\v2\x17.blackice.v1.TrustScoreR\x12assignedTrustScore\x12I\n" +
	"\x13arrival_attestation\x18\x05 \x01(\v2\x18.blackice.v1.AttestationR\x12arrivalAttestation\x12/\n" +
	"\x14processed_at_unix_ns\x18\x06 \x01(\x03R\x11processedAtUnixNs\x12[\n" +
	"\x12processing_details\x18\a \x03(\v2,.blackice.v1.BatchAck.ProcessingDetailsEntryR\x11processingDetails\x1aD\n" +
	"\x16ProcessingDetailsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x7f\n" +
	"\x12SourceTrustRequest\x12\x1b\n" +
	"\tsource_id\x18\x01 \x01(\tR\bsourceId\x12'\n" +
	"\x0finclude_history\x18\x02 \x01(\bR\x0eincludeHistory\x12#\n" +
	"\rhistory_limit\x18\x03 \x01(\x05R\fhistoryLimit\"\xf9\x01\n" +
	"\x13SourceTrustResponse\x12\x1b\n" +
	"\tsource_id\x18\x01 \x01(\tR\bsourceId\x12G\n" +
	"\x13current_trust_score\x18\x02 \x01(\v2\x17.blackice.v1.TrustScoreR\x11currentTrustScore\x12O\n" +
	"\x17historical_trust_scores\x18\x03 \x03(\v2\x17.blackice.v1.TrustScoreR\x15historicalTrustScores\x12+\n" +
	"\x06status\x18\x04 \x01(\v2\x13.blackice.v1.StatusR\x06status\"\xfa\x03\n" +
	"\x19SourceRegistrationRequest\x12\x1b\n" +
	"\tsource_id\x18\x01 \x01(\tR\bsourceId\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12$\n" +
	"\x0epublic_key_der\x18\x03 \x01(\fR\fpublicKeyDer\x12#\n" +
	"\rkey_algorithm\x18\x04 \x01(\tR\fkeyAlgorithm\x12.\n" +
	"\x13initial_trust_score\x18\x05 \x01(\x05R\x11initialTrustScore\x12c\n" +
	"\x0fsource_metadata\x18\x06 \x03(\v2:.blackice.v1.SourceRegistrationRequest.SourceMetadataEntryR\x0esourceMetadata\x124\n" +
	"\x16expected_content_types\x18\a \x03(\tR\x14expectedContentTypes\x12E\n" +
	"\x11admin_attestation\x18\b \x01(\v2\x18.blackice.v1.AttestationR\x10adminAttestation\x1aA\n" +
	"\x13SourceMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xf3\x01\n" +
	"\x1aSourceRegistrationResponse\x12\x1b\n" +
	"\tsource_id\x18\x01 \x01(\tR\bsourceId\x12+\n" +
	"\x06status\x18\x02 \x01(\v2\x13.blackice.v1.StatusR\x06status\x121\n" +
	"\x15registered_at_unix_ns\x18\x03 \x01(\x03R\x12registeredAtUnixNs\x12X\n" +
	"\x1cinitial_trust_score_assigned\x18\x04 \x01(\v2\x17.blackice.v1.TrustScoreR\x19initialTrustScoreAssigned\"\xee\x01\n" +
	"\x12UpdateTrustRequest\x12\x1b\n" +
	"\tsource_id\x18\x01 \x01(\tR\bsourceId\x12&\n" +
	"\x0fnew_trust_score\x18\x02 \x01(\x05R\rnewTrustScore\x12\x19\n" +
	"\bis_delta\x18\x03 \x01(\bR\aisDelta\x12\x16\n" +
	"\x06reason\x18\x04 \x01(\tR\x06reason\x12\x19\n" +
	"\badmin_id\x18\x05 \x01(\tR\aadminId\x12E\n" +
	"\x11admin_attestation\x18\x06 \x01(\v2\x18.blackice.v1.AttestationR\x10adminAttestation\"\xa3\x01\n" +
	"\x15IngestionStatsRequest\x127\n" +
	"\x18include_per_source_stats\x18\x01 \x01(\bR\x15includePerSourceStats\x12*\n" +
	"\x11source_ids_filter\x18\x02 \x03(\tR\x0fsourceIdsFilter\x12%\n" +
	"\x0ewindow_seconds\x18\x03 \x01(\x05R\rwindowSeconds\"\xb0\x05\n" +
	"\x16IngestionStatsResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.blackice.v1.StatusR\x06status\x126\n" +
	"\x17total_batches_processed\x18\x02 \x01(\x03R\x15totalBatchesProcessed\x129\n" +
	"\x19total_data_ingested_bytes\x18\x03 \x01(\x03R\x16totalDataIngestedBytes\x12,\n" +
	"\x12average_latency_ms\x18\x04 \x01(\x01R\x10averageLatencyMs\x12$\n" +
	"\x0ep95_latency_ms\x18\x05 \x01(\x01R\fp95LatencyMs\x12,\n" +
	"\x12error_rate_percent\x18\x06 \x01(\x01R\x10errorRatePercent\x12-\n" +
	"\x12active_connections\x18\a \x01(\x05R\x11activeConnections\x12a\n" +
	"\x10per_source_stats\x18\b \x03(\v27.blackice.v1.IngestionStatsResponse.PerSourceStatsEntryR\x0eperSourceStats\x12>\n" +
	"\x0eservice_health\x18\t \x01(\v2\x17.blackice.v1.NodeHealthR\rserviceHealth\x12<\n" +
	"\x1breport_generated_at_unix_ns\x18\n" +
	" \x01(\x03R\x17reportGeneratedAtUnixNs\x1ad\n" +
	"\x13PerSourceStatsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x127\n" +
	"\x05value\x18\x02 \x01(\v2!.blackice.v1.SourceIngestionStatsR\x05value:\x028\x01\"\x9f\x02\n" +
	"\x14SourceIngestionStats\x12\x1b\n" +
	"\tsource_id\x18\x01 \x01(\tR\bsourceId\x12+\n" +
	"\x11batches_processed\x18\x02 \x01(\x03R\x10batchesProcessed\x12.\n" +
	"\x13data_ingested_bytes\x18\x03 \x01(\x03R\x11dataIngestedBytes\x12.\n" +
	"\x13average_trust_score\x18\x04 \x01(\x01R\x11averageTrustScore\x12/\n" +
	"\x13validation_failures\x18\x05 \x01(\x03R\x12validationFailures\x12,\n" +
	"\x12average_latency_ms\x18\x06 \x01(\x01R\x10averageLatencyMs2\xc4\x03\n" +
	"\n" +
	"IngestGate\x12C\n" +
	"\bPutBatch\x12\x1c.blackice.v1.FlightDataChunk\x1a\x15.blackice.v1.BatchAck(\x010\x01\x12X\n" +
	"\x13GetSourceTrustScore\x12\x1f.blackice.v1.SourceTrustRequest\x1a .blackice.v1.SourceTrustResponse\x12a\n" +
	"\x0eRegisterSource\x12&.blackice.v1.SourceRegistrationRequest\x1a'.blackice.v1.SourceRegistrationResponse\x12V\n" +
	"\x11UpdateSourceTrust\x12\x1f.blackice.v1.UpdateTrustRequest\x1a .blackice.v1.SourceTrustResponse\x12\\\n" +
	"\x11GetIngestionStats\x12\".blackice.v1.IngestionStatsRequest\x1a#.blackice.v1.IngestionStatsResponseB7Z5github.com/TFMV/blackice/proto/blackice/v1;blackicev1b\x06proto3"

var (
	file_blackice_proto_blackice_v1_ingestion_proto_rawDescOnce sync.Once
	file_blackice_proto_blackice_v1_ingestion_proto_rawDescData []byte
)

func file_blackice_proto_blackice_v1_ingestion_proto_rawDescGZIP() []byte {
	file_blackice_proto_blackice_v1_ingestion_proto_rawDescOnce.Do(func() {
		file_blackice_proto_blackice_v1_ingestion_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_blackice_proto_blackice_v1_ingestion_proto_rawDesc), len(file_blackice_proto_blackice_v1_ingestion_proto_rawDesc)))
	})
	return file_blackice_proto_blackice_v1_ingestion_proto_rawDescData
}

var file_blackice_proto_blackice_v1_ingestion_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_blackice_proto_blackice_v1_ingestion_proto_goTypes = []any{
	(*FlightDataChunk)(nil),            // 0: blackice.v1.FlightDataChunk
	(*BatchAck)(nil),                   // 1: blackice.v1.BatchAck
	(*SourceTrustRequest)(nil),         // 2: blackice.v1.SourceTrustRequest
	(*SourceTrustResponse)(nil),        // 3: blackice.v1.SourceTrustResponse
	(*SourceRegistrationRequest)(nil),  // 4: blackice.v1.SourceRegistrationRequest
	(*SourceRegistrationResponse)(nil), // 5: blackice.v1.SourceRegistrationResponse
	(*UpdateTrustRequest)(nil),         // 6: blackice.v1.UpdateTrustRequest
	(*IngestionStatsRequest)(nil),      // 7: blackice.v1.IngestionStatsRequest
	(*IngestionStatsResponse)(nil),     // 8: blackice.v1.IngestionStatsResponse
	(*SourceIngestionStats)(nil),       // 9: blackice.v1.SourceIngestionStats
	nil,                                // 10: blackice.v1.BatchAck.ProcessingDetailsEntry
	nil,                                // 11: blackice.v1.SourceRegistrationRequest.SourceMetadataEntry
	nil,                                // 12: blackice.v1.IngestionStatsResponse.PerSourceStatsEntry
	(*BatchMetadata)(nil),              // 13: blackice.v1.BatchMetadata
	(*Attestation)(nil),                // 14: blackice.v1.Attestation
	(*MerkleProof)(nil),                // 15: blackice.v1.MerkleProof
	(*Status)(nil),                     // 16: blackice.v1.Status
	(*TrustScore)(nil),                 // 17: blackice.v1.TrustScore
	(*NodeHealth)(nil),                 // 18: blackice.v1.NodeHealth
}
var file_blackice_proto_blackice_v1_ingestion_proto_depIdxs = []int32{
	13, // 0: blackice.v1.FlightDataChunk.batch_metadata:type_name -> blackice.v1.BatchMetadata
	14, // 1: blackice.v1.FlightDataChunk.chunk_source_attestation:type_name -> blackice.v1.Attestation
	15, // 2: blackice.v1.FlightDataChunk.merkle_stream_proof:type_name -> blackice.v1.MerkleProof
	16, // 3: blackice.v1.BatchAck.status:type_name -> blackice.v1.Status
	17, // 4: blackice.v1.BatchAck.assigned_trust_score:type_name -> blackice.v1.TrustScore
	14, // 5: blackice.v1.BatchAck.arrival_attestation:type_name -> blackice.v1.Attestation
	10, // 6: blackice.v1.BatchAck.processing_details:type_name -> blackice.v1.BatchAck.ProcessingDetailsEntry
	17, // 7: blackice.v1.SourceTrustResponse.current_trust_score:type_name -> blackice.v1.TrustScore
	17, // 8: blackice.v1.SourceTrustResponse.historical_trust_scores:type_name -> blackice.v1.TrustScore
	16, // 9: blackice.v1.SourceTrustResponse.status:type_name -> blackice.v1.Status
	11, // 10: blackice.v1.SourceRegistrationRequest.source_metadata:type_name -> blackice.v1.SourceRegistrationRequest.SourceMetadataEntry
	14, // 11: blackice.v1.SourceRegistrationRequest.admin_attestation:type_name -> blackice.v1.Attestation
	16, // 12: blackice.v1.SourceRegistrationResponse.status:type_name -> blackice.v1.Status
	17, // 13: blackice.v1.SourceRegistrationResponse.initial_trust_score_assigned:type_name -> blackice.v1.TrustScore
	14, // 14: blackice.v1.UpdateTrustRequest.admin_attestation:type_name -> blackice.v1.Attestation
	16, // 15: blackice.v1.IngestionStatsResponse.status:type_name -> blackice.v1.Status
	12, // 16: blackice.v1.IngestionStatsResponse.per_source_stats:type_name -> blackice.v1.IngestionStatsResponse.PerSourceStatsEntry
	18, // 17: blackice.v1.IngestionStatsResponse.service_health:type_name -> blackice.v1.NodeHealth
	9,  // 18: blackice.v1.IngestionStatsResponse.PerSourceStatsEntry.value:type_name -> blackice.v1.SourceIngestionStats
	0,  // 19: blackice.v1.IngestGate.PutBatch:input_type -> blackice.v1.FlightDataChunk
	2,  // 20: blackice.v1.IngestGate.GetSourceTrustScore:input_type -> blackice.v1.SourceTrustRequest
	4,  // 21: blackice.v1.IngestGate.RegisterSource:input_type -> blackice.v1.SourceRegistrationRequest
	6,  // 22: blackice.v1.IngestGate.UpdateSourceTrust:input_type -> blackice.v1.UpdateTrustRequest
	7,  // 23: blackice.v1.IngestGate.GetIngestionStats:input_type -> blackice.v1.IngestionStatsRequest
	1,  // 24: blackice.v1.IngestGate.PutBatch:output_type -> blackice.v1.BatchAck
	3,  // 25: blackice.v1.IngestGate.GetSourceTrustScore:output_type -> blackice.v1.SourceTrustResponse
	5,  // 26: blackice.v1.IngestGate.RegisterSource:output_type -> blackice.v1.SourceRegistrationResponse
	3,  // 27: blackice.v1.IngestGate.UpdateSourceTrust:output_type -> blackice.v1.SourceTrustResponse
	8,  // 28: blackice.v1.IngestGate.GetIngestionStats:output_type -> blackice.v1.IngestionStatsResponse
	24, // [24:29] is the sub-list for method output_type
	19, // [19:24] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_blackice_proto_blackice_v1_ingestion_proto_init() }
func file_blackice_proto_blackice_v1_ingestion_proto_init() {
	if File_blackice_proto_blackice_v1_ingestion_proto != nil {
		return
	}
	file_blackice_proto_blackice_v1_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_blackice_proto_blackice_v1_ingestion_proto_rawDesc), len(file_blackice_proto_blackice_v1_ingestion_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blackice_proto_blackice_v1_ingestion_proto_goTypes,
		DependencyIndexes: file_blackice_proto_blackice_v1_ingestion_proto_depIdxs,
		MessageInfos:      file_blackice_proto_blackice_v1_ingestion_proto_msgTypes,
	}.Build()
	File_blackice_proto_blackice_v1_ingestion_proto = out.File
	file_blackice_proto_blackice_v1_ingestion_proto_goTypes = nil
	file_blackice_proto_blackice_v1_ingestion_proto_depIdxs = nil
}
