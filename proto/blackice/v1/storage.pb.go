// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: blackice/proto/blackice/v1/storage.proto

package blackicev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MergeBranchRequest_ConflictResolutionStrategy int32

const (
	MergeBranchRequest_FAIL_ON_CONFLICT                MergeBranchRequest_ConflictResolutionStrategy = 0
	MergeBranchRequest_SOURCE_WINS                     MergeBranchRequest_ConflictResolutionStrategy = 1
	MergeBranchRequest_TARGET_WINS                     MergeBranchRequest_ConflictResolutionStrategy = 2
	MergeBranchRequest_THREE_WAY_MERGE_OPERATOR_ASSIST MergeBranchRequest_ConflictResolutionStrategy = 3 // Requires operator input for conflicts
)

// Enum value maps for MergeBranchRequest_ConflictResolutionStrategy.
var (
	MergeBranchRequest_ConflictResolutionStrategy_name = map[int32]string{
		0: "FAIL_ON_CONFLICT",
		1: "SOURCE_WINS",
		2: "TARGET_WINS",
		3: "THREE_WAY_MERGE_OPERATOR_ASSIST",
	}
	MergeBranchRequest_ConflictResolutionStrategy_value = map[string]int32{
		"FAIL_ON_CONFLICT":                0,
		"SOURCE_WINS":                     1,
		"TARGET_WINS":                     2,
		"THREE_WAY_MERGE_OPERATOR_ASSIST": 3,
	}
)

func (x MergeBranchRequest_ConflictResolutionStrategy) Enum() *MergeBranchRequest_ConflictResolutionStrategy {
	p := new(MergeBranchRequest_ConflictResolutionStrategy)
	*p = x
	return p
}

func (x MergeBranchRequest_ConflictResolutionStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MergeBranchRequest_ConflictResolutionStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_blackice_proto_blackice_v1_storage_proto_enumTypes[0].Descriptor()
}

func (MergeBranchRequest_ConflictResolutionStrategy) Type() protoreflect.EnumType {
	return &file_blackice_proto_blackice_v1_storage_proto_enumTypes[0]
}

func (x MergeBranchRequest_ConflictResolutionStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MergeBranchRequest_ConflictResolutionStrategy.Descriptor instead.
func (MergeBranchRequest_ConflictResolutionStrategy) EnumDescriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{20, 0}
}

type IcebergSchema struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SchemaJson    string                 `protobuf:"bytes,1,opt,name=schema_json,json=schemaJson,proto3" json:"schema_json,omitempty"` // JSON representation of the Iceberg schema
	SchemaId      int32                  `protobuf:"varint,2,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`      // Fields for partition spec, sort order, etc., can be added here.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IcebergSchema) Reset() {
	*x = IcebergSchema{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IcebergSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IcebergSchema) ProtoMessage() {}

func (x *IcebergSchema) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IcebergSchema.ProtoReflect.Descriptor instead.
func (*IcebergSchema) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{0}
}

func (x *IcebergSchema) GetSchemaJson() string {
	if x != nil {
		return x.SchemaJson
	}
	return ""
}

func (x *IcebergSchema) GetSchemaId() int32 {
	if x != nil {
		return x.SchemaId
	}
	return 0
}

type CreateTableRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TableName         string                 `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"` // e.g., "finance.transactions_v1"
	Schema            *IcebergSchema         `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	TableProperties   map[string]string      `protobuf:"bytes,3,rep,name=table_properties,json=tableProperties,proto3" json:"table_properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Iceberg table properties
	AdminAttestation  *Attestation           `protobuf:"bytes,4,opt,name=admin_attestation,json=adminAttestation,proto3" json:"admin_attestation,omitempty"`                                                                        // Attestation for table creation
	InitialBranchName string                 `protobuf:"bytes,5,opt,name=initial_branch_name,json=initialBranchName,proto3" json:"initial_branch_name,omitempty"`                                                                   // Default: "main"
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CreateTableRequest) Reset() {
	*x = CreateTableRequest{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableRequest) ProtoMessage() {}

func (x *CreateTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableRequest.ProtoReflect.Descriptor instead.
func (*CreateTableRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTableRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *CreateTableRequest) GetSchema() *IcebergSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *CreateTableRequest) GetTableProperties() map[string]string {
	if x != nil {
		return x.TableProperties
	}
	return nil
}

func (x *CreateTableRequest) GetAdminAttestation() *Attestation {
	if x != nil {
		return x.AdminAttestation
	}
	return nil
}

func (x *CreateTableRequest) GetInitialBranchName() string {
	if x != nil {
		return x.InitialBranchName
	}
	return ""
}

type StorageOperationResponse struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Status                  *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	OperationId             string                 `protobuf:"bytes,2,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	CompletedAtUnixNs       int64                  `protobuf:"varint,3,opt,name=completed_at_unix_ns,json=completedAtUnixNs,proto3" json:"completed_at_unix_ns,omitempty"`
	LedgerEntryConfirmation *LedgerEntry           `protobuf:"bytes,4,opt,name=ledger_entry_confirmation,json=ledgerEntryConfirmation,proto3" json:"ledger_entry_confirmation,omitempty"` // Confirmation from ledger
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *StorageOperationResponse) Reset() {
	*x = StorageOperationResponse{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageOperationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageOperationResponse) ProtoMessage() {}

func (x *StorageOperationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageOperationResponse.ProtoReflect.Descriptor instead.
func (*StorageOperationResponse) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{2}
}

func (x *StorageOperationResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *StorageOperationResponse) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *StorageOperationResponse) GetCompletedAtUnixNs() int64 {
	if x != nil {
		return x.CompletedAtUnixNs
	}
	return 0
}

func (x *StorageOperationResponse) GetLedgerEntryConfirmation() *LedgerEntry {
	if x != nil {
		return x.LedgerEntryConfirmation
	}
	return nil
}

type GetTableRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableName     string                 `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	BranchName    string                 `protobuf:"bytes,2,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"` // Optional, defaults to main
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTableRequest) Reset() {
	*x = GetTableRequest{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableRequest) ProtoMessage() {}

func (x *GetTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableRequest.ProtoReflect.Descriptor instead.
func (*GetTableRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{3}
}

func (x *GetTableRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *GetTableRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

type GetTableSchemaResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Status             *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	TableName          string                 `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Schema             *IcebergSchema         `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	LastModifiedUnixNs int64                  `protobuf:"varint,4,opt,name=last_modified_unix_ns,json=lastModifiedUnixNs,proto3" json:"last_modified_unix_ns,omitempty"`
	CurrentSnapshotId  string                 `protobuf:"bytes,5,opt,name=current_snapshot_id,json=currentSnapshotId,proto3" json:"current_snapshot_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetTableSchemaResponse) Reset() {
	*x = GetTableSchemaResponse{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTableSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableSchemaResponse) ProtoMessage() {}

func (x *GetTableSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableSchemaResponse.ProtoReflect.Descriptor instead.
func (*GetTableSchemaResponse) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{4}
}

func (x *GetTableSchemaResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetTableSchemaResponse) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *GetTableSchemaResponse) GetSchema() *IcebergSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *GetTableSchemaResponse) GetLastModifiedUnixNs() int64 {
	if x != nil {
		return x.LastModifiedUnixNs
	}
	return 0
}

func (x *GetTableSchemaResponse) GetCurrentSnapshotId() string {
	if x != nil {
		return x.CurrentSnapshotId
	}
	return ""
}

// For WriteData, data is typically pre-staged (e.g., S3, GCS)
// and this request points to it.
type DataFile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uri           string                 `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`                                 // URI to the data file (e.g., s3://bucket/path/file.parquet)
	FileFormat    string                 `protobuf:"bytes,2,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"` // e.g., "parquet", "orc", "avro"
	RecordCount   int64                  `protobuf:"varint,3,opt,name=record_count,json=recordCount,proto3" json:"record_count,omitempty"`
	FileSizeBytes int64                  `protobuf:"varint,4,opt,name=file_size_bytes,json=fileSizeBytes,proto3" json:"file_size_bytes,omitempty"`
	// Column-level stats can be added for more optimized writes
	ColumnStatsCbor map[string][]byte `protobuf:"bytes,5,rep,name=column_stats_cbor,json=columnStatsCbor,proto3" json:"column_stats_cbor,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // CBOR encoded stats
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DataFile) Reset() {
	*x = DataFile{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFile) ProtoMessage() {}

func (x *DataFile) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFile.ProtoReflect.Descriptor instead.
func (*DataFile) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{5}
}

func (x *DataFile) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *DataFile) GetFileFormat() string {
	if x != nil {
		return x.FileFormat
	}
	return ""
}

func (x *DataFile) GetRecordCount() int64 {
	if x != nil {
		return x.RecordCount
	}
	return 0
}

func (x *DataFile) GetFileSizeBytes() int64 {
	if x != nil {
		return x.FileSizeBytes
	}
	return 0
}

func (x *DataFile) GetColumnStatsCbor() map[string][]byte {
	if x != nil {
		return x.ColumnStatsCbor
	}
	return nil
}

type WriteDataRequest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	TableName               string                 `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	BranchName              string                 `protobuf:"bytes,2,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"` // Optional, defaults to main
	DataFiles               []*DataFile            `protobuf:"bytes,3,rep,name=data_files,json=dataFiles,proto3" json:"data_files,omitempty"`
	CommitMessage           string                 `protobuf:"bytes,4,opt,name=commit_message,json=commitMessage,proto3" json:"commit_message,omitempty"`
	CommitterAttestation    *Attestation           `protobuf:"bytes,5,opt,name=committer_attestation,json=committerAttestation,proto3" json:"committer_attestation,omitempty"`                                                            // User/service attesting this write
	WriteProperties         map[string]string      `protobuf:"bytes,6,rep,name=write_properties,json=writeProperties,proto3" json:"write_properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // e.g., target file size for Iceberg
	IsReplaceOperation      bool                   `protobuf:"varint,7,opt,name=is_replace_operation,json=isReplaceOperation,proto3" json:"is_replace_operation,omitempty"`                                                               // For overwrite semantics
	ReplaceFilterExpression string                 `protobuf:"bytes,8,opt,name=replace_filter_expression,json=replaceFilterExpression,proto3" json:"replace_filter_expression,omitempty"`                                                 // Predicate for dynamic overwrite
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *WriteDataRequest) Reset() {
	*x = WriteDataRequest{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteDataRequest) ProtoMessage() {}

func (x *WriteDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteDataRequest.ProtoReflect.Descriptor instead.
func (*WriteDataRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{6}
}

func (x *WriteDataRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *WriteDataRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *WriteDataRequest) GetDataFiles() []*DataFile {
	if x != nil {
		return x.DataFiles
	}
	return nil
}

func (x *WriteDataRequest) GetCommitMessage() string {
	if x != nil {
		return x.CommitMessage
	}
	return ""
}

func (x *WriteDataRequest) GetCommitterAttestation() *Attestation {
	if x != nil {
		return x.CommitterAttestation
	}
	return nil
}

func (x *WriteDataRequest) GetWriteProperties() map[string]string {
	if x != nil {
		return x.WriteProperties
	}
	return nil
}

func (x *WriteDataRequest) GetIsReplaceOperation() bool {
	if x != nil {
		return x.IsReplaceOperation
	}
	return false
}

func (x *WriteDataRequest) GetReplaceFilterExpression() string {
	if x != nil {
		return x.ReplaceFilterExpression
	}
	return ""
}

type WriteDataResponse struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Status                  *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	SnapshotId              string                 `protobuf:"bytes,2,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"` // ID of the newly created snapshot
	CommitTimestampUnixNs   int64                  `protobuf:"varint,3,opt,name=commit_timestamp_unix_ns,json=commitTimestampUnixNs,proto3" json:"commit_timestamp_unix_ns,omitempty"`
	RecordsWritten          int64                  `protobuf:"varint,4,opt,name=records_written,json=recordsWritten,proto3" json:"records_written,omitempty"`
	LedgerEntryConfirmation *LedgerEntry           `protobuf:"bytes,5,opt,name=ledger_entry_confirmation,json=ledgerEntryConfirmation,proto3" json:"ledger_entry_confirmation,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *WriteDataResponse) Reset() {
	*x = WriteDataResponse{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteDataResponse) ProtoMessage() {}

func (x *WriteDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteDataResponse.ProtoReflect.Descriptor instead.
func (*WriteDataResponse) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{7}
}

func (x *WriteDataResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *WriteDataResponse) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (x *WriteDataResponse) GetCommitTimestampUnixNs() int64 {
	if x != nil {
		return x.CommitTimestampUnixNs
	}
	return 0
}

func (x *WriteDataResponse) GetRecordsWritten() int64 {
	if x != nil {
		return x.RecordsWritten
	}
	return 0
}

func (x *WriteDataResponse) GetLedgerEntryConfirmation() *LedgerEntry {
	if x != nil {
		return x.LedgerEntryConfirmation
	}
	return nil
}

type ReadDataRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	TableName  string                 `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	BranchName string                 `protobuf:"bytes,2,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"` // Optional, defaults to main
	// Types that are valid to be assigned to PointInTime:
	//
	//	*ReadDataRequest_SnapshotId
	//	*ReadDataRequest_AsOfTimestampUnixNs
	PointInTime      isReadDataRequest_PointInTime `protobuf_oneof:"point_in_time"`
	SelectedColumns  []string                      `protobuf:"bytes,5,rep,name=selected_columns,json=selectedColumns,proto3" json:"selected_columns,omitempty"`    // If empty, reads all columns
	FilterExpression string                        `protobuf:"bytes,6,opt,name=filter_expression,json=filterExpression,proto3" json:"filter_expression,omitempty"` // SQL-like filter predicate
	ChunkSizeBytes   int32                         `protobuf:"varint,7,opt,name=chunk_size_bytes,json=chunkSizeBytes,proto3" json:"chunk_size_bytes,omitempty"`    // Desired size for each DataChunk payload
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ReadDataRequest) Reset() {
	*x = ReadDataRequest{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDataRequest) ProtoMessage() {}

func (x *ReadDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDataRequest.ProtoReflect.Descriptor instead.
func (*ReadDataRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{8}
}

func (x *ReadDataRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *ReadDataRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *ReadDataRequest) GetPointInTime() isReadDataRequest_PointInTime {
	if x != nil {
		return x.PointInTime
	}
	return nil
}

func (x *ReadDataRequest) GetSnapshotId() string {
	if x != nil {
		if x, ok := x.PointInTime.(*ReadDataRequest_SnapshotId); ok {
			return x.SnapshotId
		}
	}
	return ""
}

func (x *ReadDataRequest) GetAsOfTimestampUnixNs() int64 {
	if x != nil {
		if x, ok := x.PointInTime.(*ReadDataRequest_AsOfTimestampUnixNs); ok {
			return x.AsOfTimestampUnixNs
		}
	}
	return 0
}

func (x *ReadDataRequest) GetSelectedColumns() []string {
	if x != nil {
		return x.SelectedColumns
	}
	return nil
}

func (x *ReadDataRequest) GetFilterExpression() string {
	if x != nil {
		return x.FilterExpression
	}
	return ""
}

func (x *ReadDataRequest) GetChunkSizeBytes() int32 {
	if x != nil {
		return x.ChunkSizeBytes
	}
	return 0
}

type isReadDataRequest_PointInTime interface {
	isReadDataRequest_PointInTime()
}

type ReadDataRequest_SnapshotId struct {
	SnapshotId string `protobuf:"bytes,3,opt,name=snapshot_id,json=snapshotId,proto3,oneof"`
}

type ReadDataRequest_AsOfTimestampUnixNs struct {
	AsOfTimestampUnixNs int64 `protobuf:"varint,4,opt,name=as_of_timestamp_unix_ns,json=asOfTimestampUnixNs,proto3,oneof"`
}

func (*ReadDataRequest_SnapshotId) isReadDataRequest_PointInTime() {}

func (*ReadDataRequest_AsOfTimestampUnixNs) isReadDataRequest_PointInTime() {}

// DataChunk streams data back to the client, likely in Arrow format.
type DataChunk struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ArrowPayload   []byte                 `protobuf:"bytes,1,opt,name=arrow_payload,json=arrowPayload,proto3" json:"arrow_payload,omitempty"` // Serialized Arrow RecordBatch
	SequenceNumber int64                  `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	IsLastChunk    bool                   `protobuf:"varint,3,opt,name=is_last_chunk,json=isLastChunk,proto3" json:"is_last_chunk,omitempty"`
	Status         *Status                `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"` // Status for this specific chunk (e.g., if an error occurs mid-stream)
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DataChunk) Reset() {
	*x = DataChunk{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataChunk) ProtoMessage() {}

func (x *DataChunk) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataChunk.ProtoReflect.Descriptor instead.
func (*DataChunk) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{9}
}

func (x *DataChunk) GetArrowPayload() []byte {
	if x != nil {
		return x.ArrowPayload
	}
	return nil
}

func (x *DataChunk) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *DataChunk) GetIsLastChunk() bool {
	if x != nil {
		return x.IsLastChunk
	}
	return false
}

func (x *DataChunk) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type Snapshot struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SnapshotId           string                 `protobuf:"bytes,1,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	TimestampUnixNs      int64                  `protobuf:"varint,2,opt,name=timestamp_unix_ns,json=timestampUnixNs,proto3" json:"timestamp_unix_ns,omitempty"`
	ParentSnapshotId     string                 `protobuf:"bytes,3,opt,name=parent_snapshot_id,json=parentSnapshotId,proto3" json:"parent_snapshot_id,omitempty"`                               // Empty if first snapshot
	Operation            string                 `protobuf:"bytes,4,opt,name=operation,proto3" json:"operation,omitempty"`                                                                       // e.g., "append", "overwrite", "replace", "delete"
	Summary              map[string]string      `protobuf:"bytes,5,rep,name=summary,proto3" json:"summary,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Iceberg snapshot summary (e.g., files added/deleted)
	ManifestListUri      string                 `protobuf:"bytes,6,opt,name=manifest_list_uri,json=manifestListUri,proto3" json:"manifest_list_uri,omitempty"`                                  // URI to the manifest list file
	CommitterAttestation *Attestation           `protobuf:"bytes,7,opt,name=committer_attestation,json=committerAttestation,proto3" json:"committer_attestation,omitempty"`                     // Stored with snapshot for audit
	LedgerReference      *LedgerEntry           `protobuf:"bytes,8,opt,name=ledger_reference,json=ledgerReference,proto3" json:"ledger_reference,omitempty"`                                    // Reference to ledger entry for this commit
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{10}
}

func (x *Snapshot) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (x *Snapshot) GetTimestampUnixNs() int64 {
	if x != nil {
		return x.TimestampUnixNs
	}
	return 0
}

func (x *Snapshot) GetParentSnapshotId() string {
	if x != nil {
		return x.ParentSnapshotId
	}
	return ""
}

func (x *Snapshot) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *Snapshot) GetSummary() map[string]string {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *Snapshot) GetManifestListUri() string {
	if x != nil {
		return x.ManifestListUri
	}
	return ""
}

func (x *Snapshot) GetCommitterAttestation() *Attestation {
	if x != nil {
		return x.CommitterAttestation
	}
	return nil
}

func (x *Snapshot) GetLedgerReference() *LedgerEntry {
	if x != nil {
		return x.LedgerReference
	}
	return nil
}

type CreateSnapshotRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	TableName            string                 `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	BranchName           string                 `protobuf:"bytes,2,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	CommitMessage        string                 `protobuf:"bytes,3,opt,name=commit_message,json=commitMessage,proto3" json:"commit_message,omitempty"`
	CommitterAttestation *Attestation           `protobuf:"bytes,4,opt,name=committer_attestation,json=committerAttestation,proto3" json:"committer_attestation,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CreateSnapshotRequest) Reset() {
	*x = CreateSnapshotRequest{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSnapshotRequest) ProtoMessage() {}

func (x *CreateSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSnapshotRequest.ProtoReflect.Descriptor instead.
func (*CreateSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{11}
}

func (x *CreateSnapshotRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *CreateSnapshotRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *CreateSnapshotRequest) GetCommitMessage() string {
	if x != nil {
		return x.CommitMessage
	}
	return ""
}

func (x *CreateSnapshotRequest) GetCommitterAttestation() *Attestation {
	if x != nil {
		return x.CommitterAttestation
	}
	return nil
}

type SnapshotResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Snapshot      *Snapshot              `protobuf:"bytes,2,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnapshotResponse) Reset() {
	*x = SnapshotResponse{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotResponse) ProtoMessage() {}

func (x *SnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotResponse.ProtoReflect.Descriptor instead.
func (*SnapshotResponse) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{12}
}

func (x *SnapshotResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SnapshotResponse) GetSnapshot() *Snapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type ListSnapshotsRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	TableName            string                 `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	BranchName           string                 `protobuf:"bytes,2,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	PageToken            string                 `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"` // For pagination
	PageSize             int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	StartTimestampUnixNs int64                  `protobuf:"varint,5,opt,name=start_timestamp_unix_ns,json=startTimestampUnixNs,proto3" json:"start_timestamp_unix_ns,omitempty"` // Filter by time range
	EndTimestampUnixNs   int64                  `protobuf:"varint,6,opt,name=end_timestamp_unix_ns,json=endTimestampUnixNs,proto3" json:"end_timestamp_unix_ns,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ListSnapshotsRequest) Reset() {
	*x = ListSnapshotsRequest{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSnapshotsRequest) ProtoMessage() {}

func (x *ListSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*ListSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{13}
}

func (x *ListSnapshotsRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *ListSnapshotsRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *ListSnapshotsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListSnapshotsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSnapshotsRequest) GetStartTimestampUnixNs() int64 {
	if x != nil {
		return x.StartTimestampUnixNs
	}
	return 0
}

func (x *ListSnapshotsRequest) GetEndTimestampUnixNs() int64 {
	if x != nil {
		return x.EndTimestampUnixNs
	}
	return 0
}

type GetSnapshotRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableName     string                 `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	SnapshotId    string                 `protobuf:"bytes,2,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSnapshotRequest) Reset() {
	*x = GetSnapshotRequest{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSnapshotRequest) ProtoMessage() {}

func (x *GetSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSnapshotRequest.ProtoReflect.Descriptor instead.
func (*GetSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{14}
}

func (x *GetSnapshotRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *GetSnapshotRequest) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

type ListSnapshotsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Snapshots     []*Snapshot            `protobuf:"bytes,2,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
	NextPageToken string                 `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSnapshotsResponse) Reset() {
	*x = ListSnapshotsResponse{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSnapshotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSnapshotsResponse) ProtoMessage() {}

func (x *ListSnapshotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSnapshotsResponse.ProtoReflect.Descriptor instead.
func (*ListSnapshotsResponse) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{15}
}

func (x *ListSnapshotsResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListSnapshotsResponse) GetSnapshots() []*Snapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

func (x *ListSnapshotsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type RollbackTableRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	TableName  string                 `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	BranchName string                 `protobuf:"bytes,2,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	// Types that are valid to be assigned to Target:
	//
	//	*RollbackTableRequest_SnapshotId
	//	*RollbackTableRequest_ToTimestampUnixNs
	Target           isRollbackTableRequest_Target `protobuf_oneof:"target"`
	AdminAttestation *Attestation                  `protobuf:"bytes,5,opt,name=admin_attestation,json=adminAttestation,proto3" json:"admin_attestation,omitempty"` // Requires strong authorization
	Reason           string                        `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RollbackTableRequest) Reset() {
	*x = RollbackTableRequest{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackTableRequest) ProtoMessage() {}

func (x *RollbackTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackTableRequest.ProtoReflect.Descriptor instead.
func (*RollbackTableRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{16}
}

func (x *RollbackTableRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *RollbackTableRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *RollbackTableRequest) GetTarget() isRollbackTableRequest_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *RollbackTableRequest) GetSnapshotId() string {
	if x != nil {
		if x, ok := x.Target.(*RollbackTableRequest_SnapshotId); ok {
			return x.SnapshotId
		}
	}
	return ""
}

func (x *RollbackTableRequest) GetToTimestampUnixNs() int64 {
	if x != nil {
		if x, ok := x.Target.(*RollbackTableRequest_ToTimestampUnixNs); ok {
			return x.ToTimestampUnixNs
		}
	}
	return 0
}

func (x *RollbackTableRequest) GetAdminAttestation() *Attestation {
	if x != nil {
		return x.AdminAttestation
	}
	return nil
}

func (x *RollbackTableRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type isRollbackTableRequest_Target interface {
	isRollbackTableRequest_Target()
}

type RollbackTableRequest_SnapshotId struct {
	SnapshotId string `protobuf:"bytes,3,opt,name=snapshot_id,json=snapshotId,proto3,oneof"`
}

type RollbackTableRequest_ToTimestampUnixNs struct {
	ToTimestampUnixNs int64 `protobuf:"varint,4,opt,name=to_timestamp_unix_ns,json=toTimestampUnixNs,proto3,oneof"`
}

func (*RollbackTableRequest_SnapshotId) isRollbackTableRequest_Target() {}

func (*RollbackTableRequest_ToTimestampUnixNs) isRollbackTableRequest_Target() {}

type Branch struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	BranchName            string                 `protobuf:"bytes,1,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	TableName             string                 `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	HeadSnapshotId        string                 `protobuf:"bytes,3,opt,name=head_snapshot_id,json=headSnapshotId,proto3" json:"head_snapshot_id,omitempty"`
	CreatedAtUnixNs       int64                  `protobuf:"varint,4,opt,name=created_at_unix_ns,json=createdAtUnixNs,proto3" json:"created_at_unix_ns,omitempty"`
	CreatedFromBranch     string                 `protobuf:"bytes,5,opt,name=created_from_branch,json=createdFromBranch,proto3" json:"created_from_branch,omitempty"`               // Optional: parent branch
	CreatedFromSnapshotId string                 `protobuf:"bytes,6,opt,name=created_from_snapshot_id,json=createdFromSnapshotId,proto3" json:"created_from_snapshot_id,omitempty"` // Snapshot ID at branching point
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Branch) Reset() {
	*x = Branch{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Branch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Branch) ProtoMessage() {}

func (x *Branch) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Branch.ProtoReflect.Descriptor instead.
func (*Branch) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{17}
}

func (x *Branch) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *Branch) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *Branch) GetHeadSnapshotId() string {
	if x != nil {
		return x.HeadSnapshotId
	}
	return ""
}

func (x *Branch) GetCreatedAtUnixNs() int64 {
	if x != nil {
		return x.CreatedAtUnixNs
	}
	return 0
}

func (x *Branch) GetCreatedFromBranch() string {
	if x != nil {
		return x.CreatedFromBranch
	}
	return ""
}

func (x *Branch) GetCreatedFromSnapshotId() string {
	if x != nil {
		return x.CreatedFromSnapshotId
	}
	return ""
}

type CreateBranchRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	TableName          string                 `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	NewBranchName      string                 `protobuf:"bytes,2,opt,name=new_branch_name,json=newBranchName,proto3" json:"new_branch_name,omitempty"`
	SourceBranchName   string                 `protobuf:"bytes,3,opt,name=source_branch_name,json=sourceBranchName,proto3" json:"source_branch_name,omitempty"` // Optional: defaults to main
	SourceSnapshotId   string                 `protobuf:"bytes,4,opt,name=source_snapshot_id,json=sourceSnapshotId,proto3" json:"source_snapshot_id,omitempty"` // Optional: defaults to head of source_branch_name
	CreatorAttestation *Attestation           `protobuf:"bytes,5,opt,name=creator_attestation,json=creatorAttestation,proto3" json:"creator_attestation,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CreateBranchRequest) Reset() {
	*x = CreateBranchRequest{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBranchRequest) ProtoMessage() {}

func (x *CreateBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBranchRequest.ProtoReflect.Descriptor instead.
func (*CreateBranchRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{18}
}

func (x *CreateBranchRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *CreateBranchRequest) GetNewBranchName() string {
	if x != nil {
		return x.NewBranchName
	}
	return ""
}

func (x *CreateBranchRequest) GetSourceBranchName() string {
	if x != nil {
		return x.SourceBranchName
	}
	return ""
}

func (x *CreateBranchRequest) GetSourceSnapshotId() string {
	if x != nil {
		return x.SourceSnapshotId
	}
	return ""
}

func (x *CreateBranchRequest) GetCreatorAttestation() *Attestation {
	if x != nil {
		return x.CreatorAttestation
	}
	return nil
}

type BranchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Branch        *Branch                `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BranchResponse) Reset() {
	*x = BranchResponse{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchResponse) ProtoMessage() {}

func (x *BranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchResponse.ProtoReflect.Descriptor instead.
func (*BranchResponse) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{19}
}

func (x *BranchResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BranchResponse) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

type MergeBranchRequest struct {
	state             protoimpl.MessageState                        `protogen:"open.v1"`
	TableName         string                                        `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	SourceBranch      string                                        `protobuf:"bytes,2,opt,name=source_branch,json=sourceBranch,proto3" json:"source_branch,omitempty"`
	TargetBranch      string                                        `protobuf:"bytes,3,opt,name=target_branch,json=targetBranch,proto3" json:"target_branch,omitempty"`
	CommitMessage     string                                        `protobuf:"bytes,4,opt,name=commit_message,json=commitMessage,proto3" json:"commit_message,omitempty"`
	MergerAttestation *Attestation                                  `protobuf:"bytes,5,opt,name=merger_attestation,json=mergerAttestation,proto3" json:"merger_attestation,omitempty"`
	Strategy          MergeBranchRequest_ConflictResolutionStrategy `protobuf:"varint,6,opt,name=strategy,proto3,enum=blackice.v1.MergeBranchRequest_ConflictResolutionStrategy" json:"strategy,omitempty"`
	// Details for operator assist if strategy is THREE_WAY_MERGE_OPERATOR_ASSIST
	OperatorIdForAssist string `protobuf:"bytes,7,opt,name=operator_id_for_assist,json=operatorIdForAssist,proto3" json:"operator_id_for_assist,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MergeBranchRequest) Reset() {
	*x = MergeBranchRequest{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeBranchRequest) ProtoMessage() {}

func (x *MergeBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeBranchRequest.ProtoReflect.Descriptor instead.
func (*MergeBranchRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{20}
}

func (x *MergeBranchRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *MergeBranchRequest) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

func (x *MergeBranchRequest) GetTargetBranch() string {
	if x != nil {
		return x.TargetBranch
	}
	return ""
}

func (x *MergeBranchRequest) GetCommitMessage() string {
	if x != nil {
		return x.CommitMessage
	}
	return ""
}

func (x *MergeBranchRequest) GetMergerAttestation() *Attestation {
	if x != nil {
		return x.MergerAttestation
	}
	return nil
}

func (x *MergeBranchRequest) GetStrategy() MergeBranchRequest_ConflictResolutionStrategy {
	if x != nil {
		return x.Strategy
	}
	return MergeBranchRequest_FAIL_ON_CONFLICT
}

func (x *MergeBranchRequest) GetOperatorIdForAssist() string {
	if x != nil {
		return x.OperatorIdForAssist
	}
	return ""
}

type MergeResponse struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Status                   *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	NewSnapshotIdOnTarget    string                 `protobuf:"bytes,2,opt,name=new_snapshot_id_on_target,json=newSnapshotIdOnTarget,proto3" json:"new_snapshot_id_on_target,omitempty"`
	ConflictsResolved        int32                  `protobuf:"varint,3,opt,name=conflicts_resolved,json=conflictsResolved,proto3" json:"conflicts_resolved,omitempty"`
	ConflictsPendingOperator int32                  `protobuf:"varint,4,opt,name=conflicts_pending_operator,json=conflictsPendingOperator,proto3" json:"conflicts_pending_operator,omitempty"`
	LedgerEntryConfirmation  *LedgerEntry           `protobuf:"bytes,5,opt,name=ledger_entry_confirmation,json=ledgerEntryConfirmation,proto3" json:"ledger_entry_confirmation,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *MergeResponse) Reset() {
	*x = MergeResponse{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeResponse) ProtoMessage() {}

func (x *MergeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeResponse.ProtoReflect.Descriptor instead.
func (*MergeResponse) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{21}
}

func (x *MergeResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MergeResponse) GetNewSnapshotIdOnTarget() string {
	if x != nil {
		return x.NewSnapshotIdOnTarget
	}
	return ""
}

func (x *MergeResponse) GetConflictsResolved() int32 {
	if x != nil {
		return x.ConflictsResolved
	}
	return 0
}

func (x *MergeResponse) GetConflictsPendingOperator() int32 {
	if x != nil {
		return x.ConflictsPendingOperator
	}
	return 0
}

func (x *MergeResponse) GetLedgerEntryConfirmation() *LedgerEntry {
	if x != nil {
		return x.LedgerEntryConfirmation
	}
	return nil
}

type ListBranchesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableName     string                 `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBranchesRequest) Reset() {
	*x = ListBranchesRequest{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBranchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBranchesRequest) ProtoMessage() {}

func (x *ListBranchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBranchesRequest.ProtoReflect.Descriptor instead.
func (*ListBranchesRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{22}
}

func (x *ListBranchesRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type ListBranchesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Branches      []*Branch              `protobuf:"bytes,2,rep,name=branches,proto3" json:"branches,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBranchesResponse) Reset() {
	*x = ListBranchesResponse{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBranchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBranchesResponse) ProtoMessage() {}

func (x *ListBranchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBranchesResponse.ProtoReflect.Descriptor instead.
func (*ListBranchesResponse) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{23}
}

func (x *ListBranchesResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListBranchesResponse) GetBranches() []*Branch {
	if x != nil {
		return x.Branches
	}
	return nil
}

type StorageStatsRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TableNameFilter  string                 `protobuf:"bytes,1,opt,name=table_name_filter,json=tableNameFilter,proto3" json:"table_name_filter,omitempty"`    // Optional: filter by table name (can use wildcards)
	BranchNameFilter string                 `protobuf:"bytes,2,opt,name=branch_name_filter,json=branchNameFilter,proto3" json:"branch_name_filter,omitempty"` // Optional: filter by branch name
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StorageStatsRequest) Reset() {
	*x = StorageStatsRequest{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageStatsRequest) ProtoMessage() {}

func (x *StorageStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageStatsRequest.ProtoReflect.Descriptor instead.
func (*StorageStatsRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{24}
}

func (x *StorageStatsRequest) GetTableNameFilter() string {
	if x != nil {
		return x.TableNameFilter
	}
	return ""
}

func (x *StorageStatsRequest) GetBranchNameFilter() string {
	if x != nil {
		return x.BranchNameFilter
	}
	return ""
}

type StorageStatsResponse struct {
	state              protoimpl.MessageState        `protogen:"open.v1"`
	Status             *Status                       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	TotalTables        int64                         `protobuf:"varint,2,opt,name=total_tables,json=totalTables,proto3" json:"total_tables,omitempty"`
	TotalSnapshots     int64                         `protobuf:"varint,3,opt,name=total_snapshots,json=totalSnapshots,proto3" json:"total_snapshots,omitempty"`
	TotalDataSizeBytes int64                         `protobuf:"varint,4,opt,name=total_data_size_bytes,json=totalDataSizeBytes,proto3" json:"total_data_size_bytes,omitempty"`
	PerTableStats      map[string]*TableStorageStats `protobuf:"bytes,5,rep,name=per_table_stats,json=perTableStats,proto3" json:"per_table_stats,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ServiceHealth      *NodeHealth                   `protobuf:"bytes,6,opt,name=service_health,json=serviceHealth,proto3" json:"service_health,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *StorageStatsResponse) Reset() {
	*x = StorageStatsResponse{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageStatsResponse) ProtoMessage() {}

func (x *StorageStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageStatsResponse.ProtoReflect.Descriptor instead.
func (*StorageStatsResponse) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{25}
}

func (x *StorageStatsResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *StorageStatsResponse) GetTotalTables() int64 {
	if x != nil {
		return x.TotalTables
	}
	return 0
}

func (x *StorageStatsResponse) GetTotalSnapshots() int64 {
	if x != nil {
		return x.TotalSnapshots
	}
	return 0
}

func (x *StorageStatsResponse) GetTotalDataSizeBytes() int64 {
	if x != nil {
		return x.TotalDataSizeBytes
	}
	return 0
}

func (x *StorageStatsResponse) GetPerTableStats() map[string]*TableStorageStats {
	if x != nil {
		return x.PerTableStats
	}
	return nil
}

func (x *StorageStatsResponse) GetServiceHealth() *NodeHealth {
	if x != nil {
		return x.ServiceHealth
	}
	return nil
}

type TableStorageStats struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	TableName          string                 `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	SnapshotsCount     int64                  `protobuf:"varint,2,opt,name=snapshots_count,json=snapshotsCount,proto3" json:"snapshots_count,omitempty"`
	DataSizeBytes      int64                  `protobuf:"varint,3,opt,name=data_size_bytes,json=dataSizeBytes,proto3" json:"data_size_bytes,omitempty"`
	LastCommitAtUnixNs int64                  `protobuf:"varint,4,opt,name=last_commit_at_unix_ns,json=lastCommitAtUnixNs,proto3" json:"last_commit_at_unix_ns,omitempty"`
	BranchesCount      int32                  `protobuf:"varint,5,opt,name=branches_count,json=branchesCount,proto3" json:"branches_count,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TableStorageStats) Reset() {
	*x = TableStorageStats{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableStorageStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableStorageStats) ProtoMessage() {}

func (x *TableStorageStats) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableStorageStats.ProtoReflect.Descriptor instead.
func (*TableStorageStats) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{26}
}

func (x *TableStorageStats) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *TableStorageStats) GetSnapshotsCount() int64 {
	if x != nil {
		return x.SnapshotsCount
	}
	return 0
}

func (x *TableStorageStats) GetDataSizeBytes() int64 {
	if x != nil {
		return x.DataSizeBytes
	}
	return 0
}

func (x *TableStorageStats) GetLastCommitAtUnixNs() int64 {
	if x != nil {
		return x.LastCommitAtUnixNs
	}
	return 0
}

func (x *TableStorageStats) GetBranchesCount() int32 {
	if x != nil {
		return x.BranchesCount
	}
	return 0
}

type ManageRetentionPolicyRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TableName        string                 `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	BranchName       string                 `protobuf:"bytes,2,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"` // Optional, policy can be per-branch
	Policy           *RetentionPolicy       `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`
	AdminAttestation *Attestation           `protobuf:"bytes,4,opt,name=admin_attestation,json=adminAttestation,proto3" json:"admin_attestation,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ManageRetentionPolicyRequest) Reset() {
	*x = ManageRetentionPolicyRequest{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManageRetentionPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManageRetentionPolicyRequest) ProtoMessage() {}

func (x *ManageRetentionPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManageRetentionPolicyRequest.ProtoReflect.Descriptor instead.
func (*ManageRetentionPolicyRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{27}
}

func (x *ManageRetentionPolicyRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *ManageRetentionPolicyRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *ManageRetentionPolicyRequest) GetPolicy() *RetentionPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *ManageRetentionPolicyRequest) GetAdminAttestation() *Attestation {
	if x != nil {
		return x.AdminAttestation
	}
	return nil
}

type RetentionPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Example: Keep snapshots for 30 days, then retain monthly for 1 year, then yearly for 7 years.
	// Keep all snapshots newer than this duration (e.g., "30d", "90d")
	KeepMinDurationStr string `protobuf:"bytes,1,opt,name=keep_min_duration_str,json=keepMinDurationStr,proto3" json:"keep_min_duration_str,omitempty"` // ISO 8601 duration format (e.g., P30D)
	// Number of hourly/daily/weekly/monthly/yearly snapshots to retain beyond min_duration
	KeepHourlyCount     int32 `protobuf:"varint,2,opt,name=keep_hourly_count,json=keepHourlyCount,proto3" json:"keep_hourly_count,omitempty"`
	KeepDailyCount      int32 `protobuf:"varint,3,opt,name=keep_daily_count,json=keepDailyCount,proto3" json:"keep_daily_count,omitempty"`
	KeepWeeklyCount     int32 `protobuf:"varint,4,opt,name=keep_weekly_count,json=keepWeeklyCount,proto3" json:"keep_weekly_count,omitempty"`
	KeepMonthlyCount    int32 `protobuf:"varint,5,opt,name=keep_monthly_count,json=keepMonthlyCount,proto3" json:"keep_monthly_count,omitempty"`
	KeepYearlyCount     int32 `protobuf:"varint,6,opt,name=keep_yearly_count,json=keepYearlyCount,proto3" json:"keep_yearly_count,omitempty"`
	DeleteOrphanedFiles bool  `protobuf:"varint,7,opt,name=delete_orphaned_files,json=deleteOrphanedFiles,proto3" json:"delete_orphaned_files,omitempty"` // Whether to physically delete data files not referenced by retained snapshots
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RetentionPolicy) Reset() {
	*x = RetentionPolicy{}
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetentionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetentionPolicy) ProtoMessage() {}

func (x *RetentionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_storage_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetentionPolicy.ProtoReflect.Descriptor instead.
func (*RetentionPolicy) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP(), []int{28}
}

func (x *RetentionPolicy) GetKeepMinDurationStr() string {
	if x != nil {
		return x.KeepMinDurationStr
	}
	return ""
}

func (x *RetentionPolicy) GetKeepHourlyCount() int32 {
	if x != nil {
		return x.KeepHourlyCount
	}
	return 0
}

func (x *RetentionPolicy) GetKeepDailyCount() int32 {
	if x != nil {
		return x.KeepDailyCount
	}
	return 0
}

func (x *RetentionPolicy) GetKeepWeeklyCount() int32 {
	if x != nil {
		return x.KeepWeeklyCount
	}
	return 0
}

func (x *RetentionPolicy) GetKeepMonthlyCount() int32 {
	if x != nil {
		return x.KeepMonthlyCount
	}
	return 0
}

func (x *RetentionPolicy) GetKeepYearlyCount() int32 {
	if x != nil {
		return x.KeepYearlyCount
	}
	return 0
}

func (x *RetentionPolicy) GetDeleteOrphanedFiles() bool {
	if x != nil {
		return x.DeleteOrphanedFiles
	}
	return false
}

var File_blackice_proto_blackice_v1_storage_proto protoreflect.FileDescriptor

const file_blackice_proto_blackice_v1_storage_proto_rawDesc = "" +
	"\n" +
	"(blackice/proto/blackice/v1/storage.proto\x12\vblackice.v1\x1a'blackice/proto/blackice/v1/common.proto\"M\n" +
	"\rIcebergSchema\x12\x1f\n" +
	"\vschema_json\x18\x01 \x01(\tR\n" +
	"schemaJson\x12\x1b\n" +
	"\tschema_id\x18\x02 \x01(\x05R\bschemaId\"\x83\x03\n" +
	"\x12CreateTableRequest\x12\x1d\n" +
	"\n" +
	"table_name\x18\x01 \x01(\tR\ttableName\x122\n" +
	"\x06schema\x18\x02 \x01(\v2\x1a.blackice.v1.IcebergSchemaR\x06schema\x12_\n" +
	"\x10table_properties\x18\x03 \x03(\v24.blackice.v1.CreateTableRequest.TablePropertiesEntryR\x0ftableProperties\x12E\n" +
	"\x11admin_attestation\x18\x04 \x01(\v2\x18.blackice.v1.AttestationR\x10adminAttestation\x12.\n" +
	"\x13initial_branch_name\x18\x05 \x01(\tR\x11initialBranchName\x1aB\n" +
	"\x14TablePropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xf1\x01\n" +
	"\x18StorageOperationResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.blackice.v1.StatusR\x06status\x12!\n" +
	"\foperation_id\x18\x02 \x01(\tR\voperationId\x12/\n" +
	"\x14completed_at_unix_ns\x18\x03 \x01(\x03R\x11completedAtUnixNs\x12T\n" +
	"\x19ledger_entry_confirmation\x18\x04 \x01(\v2\x18.blackice.v1.LedgerEntryR\x17ledgerEntryConfirmation\"Q\n" +
	"\x0fGetTableRequest\x12\x1d\n" +
	"\n" +
	"table_name\x18\x01 \x01(\tR\ttableName\x12\x1f\n" +
	"\vbranch_name\x18\x02 \x01(\tR\n" +
	"branchName\"\xfb\x01\n" +
	"\x16GetTableSchemaResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.blackice.v1.StatusR\x06status\x12\x1d\n" +
	"\n" +
	"table_name\x18\x02 \x01(\tR\ttableName\x122\n" +
	"\x06schema\x18\x03 \x01(\v2\x1a.blackice.v1.IcebergSchemaR\x06schema\x121\n" +
	"\x15last_modified_unix_ns\x18\x04 \x01(\x03R\x12lastModifiedUnixNs\x12.\n" +
	"\x13current_snapshot_id\x18\x05 \x01(\tR\x11currentSnapshotId\"\xa4\x02\n" +
	"\bDataFile\x12\x10\n" +
	"\x03uri\x18\x01 \x01(\tR\x03uri\x12\x1f\n" +
	"\vfile_format\x18\x02 \x01(\tR\n" +
	"fileFormat\x12!\n" +
	"\frecord_count\x18\x03 \x01(\x03R\vrecordCount\x12&\n" +
	"\x0ffile_size_bytes\x18\x04 \x01(\x03R\rfileSizeBytes\x12V\n" +
	"\x11column_stats_cbor\x18\x05 \x03(\v2*.blackice.v1.DataFile.ColumnStatsCborEntryR\x0fcolumnStatsCbor\x1aB\n" +
	"\x14ColumnStatsCborEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\"\x8f\x04\n" +
	"\x10WriteDataRequest\x12\x1d\n" +
	"\n" +
	"table_name\x18\x01 \x01(\tR\ttableName\x12\x1f\n" +
	"\vbranch_name\x18\x02 \x01(\tR\n" +
	"branchName\x124\n" +
	"\n" +
	"data_files\x18\x03 \x03(\v2\x15.blackice.v1.DataFileR\tdataFiles\x12%\n" +
	"\x0ecommit_message\x18\x04 \x01(\tR\rcommitMessage\x12M\n" +
	"\x15committer_attestation\x18\x05 \x01(\v2\x18.blackice.v1.AttestationR\x14committerAttestation\x12]\n" +
	"\x10write_properties\x18\x06 \x03(\v22.blackice.v1.WriteDataRequest.WritePropertiesEntryR\x0fwriteProperties\x120\n" +
	"\x14is_replace_operation\x18\a \x01(\bR\x12isReplaceOperation\x12:\n" +
	"\x19replace_filter_expression\x18\b \x01(\tR\x17replaceFilterExpression\x1aB\n" +
	"\x14WritePropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x99\x02\n" +
	"\x11WriteDataResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.blackice.v1.StatusR\x06status\x12\x1f\n" +
	"\vsnapshot_id\x18\x02 \x01(\tR\n" +
	"snapshotId\x127\n" +
	"\x18commit_timestamp_unix_ns\x18\x03 \x01(\x03R\x15commitTimestampUnixNs\x12'\n" +
	"\x0frecords_written\x18\x04 \x01(\x03R\x0erecordsWritten\x12T\n" +
	"\x19ledger_entry_confirmation\x18\x05 \x01(\v2\x18.blackice.v1.LedgerEntryR\x17ledgerEntryConfirmation\"\xbf\x02\n" +
	"\x0fReadDataRequest\x12\x1d\n" +
	"\n" +
	"table_name\x18\x01 \x01(\tR\ttableName\x12\x1f\n" +
	"\vbranch_name\x18\x02 \x01(\tR\n" +
	"branchName\x12!\n" +
	"\vsnapshot_id\x18\x03 \x01(\tH\x00R\n" +
	"snapshotId\x126\n" +
	"\x17as_of_timestamp_unix_ns\x18\x04 \x01(\x03H\x00R\x13asOfTimestampUnixNs\x12)\n" +
	"\x10selected_columns\x18\x05 \x03(\tR\x0fselectedColumns\x12+\n" +
	"\x11filter_expression\x18\x06 \x01(\tR\x10filterExpression\x12(\n" +
	"\x10chunk_size_bytes\x18\a \x01(\x05R\x0echunkSizeBytesB\x0f\n" +
	"\rpoint_in_time\"\xaa\x01\n" +
	"\tDataChunk\x12#\n" +
	"\rarrow_payload\x18\x01 \x01(\fR\farrowPayload\x12'\n" +
	"\x0fsequence_number\x18\x02 \x01(\x03R\x0esequenceNumber\x12\"\n" +
	"\ris_last_chunk\x18\x03 \x01(\bR\visLastChunk\x12+\n" +
	"\x06status\x18\x04 \x01(\v2\x13.blackice.v1.StatusR\x06status\"\xdd\x03\n" +
	"\bSnapshot\x12\x1f\n" +
	"\vsnapshot_id\x18\x01 \x01(\tR\n" +
	"snapshotId\x12*\n" +
	"\x11timestamp_unix_ns\x18\x02 \x01(\x03R\x0ftimestampUnixNs\x12,\n" +
	"\x12parent_snapshot_id\x18\x03 \x01(\tR\x10parentSnapshotId\x12\x1c\n" +
	"\toperation\x18\x04 \x01(\tR\toperation\x12<\n" +
	"\asummary\x18\x05 \x03(\v2\".blackice.v1.Snapshot.SummaryEntryR\asummary\x12*\n" +
	"\x11manifest_list_uri\x18\x06 \x01(\tR\x0fmanifestListUri\x12M\n" +
	"\x15committer_attestation\x18\a \x01(\v2\x18.blackice.v1.AttestationR\x14committerAttestation\x12C\n" +
	"\x10ledger_reference\x18\b \x01(\v2\x18.blackice.v1.LedgerEntryR\x0fledgerReference\x1a:\n" +
	"\fSummaryEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xcd\x01\n" +
	"\x15CreateSnapshotRequest\x12\x1d\n" +
	"\n" +
	"table_name\x18\x01 \x01(\tR\ttableName\x12\x1f\n" +
	"\vbranch_name\x18\x02 \x01(\tR\n" +
	"branchName\x12%\n" +
	"\x0ecommit_message\x18\x03 \x01(\tR\rcommitMessage\x12M\n" +
	"\x15committer_attestation\x18\x04 \x01(\v2\x18.blackice.v1.AttestationR\x14committerAttestation\"r\n" +
	"\x10SnapshotResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.blackice.v1.StatusR\x06status\x121\n" +
	"\bsnapshot\x18\x02 \x01(\v2\x15.blackice.v1.SnapshotR\bsnapshot\"\xfc\x01\n" +
	"\x14ListSnapshotsRequest\x12\x1d\n" +
	"\n" +
	"table_name\x18\x01 \x01(\tR\ttableName\x12\x1f\n" +
	"\vbranch_name\x18\x02 \x01(\tR\n" +
	"branchName\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x125\n" +
	"\x17start_timestamp_unix_ns\x18\x05 \x01(\x03R\x14startTimestampUnixNs\x121\n" +
	"\x15end_timestamp_unix_ns\x18\x06 \x01(\x03R\x12endTimestampUnixNs\"T\n" +
	"\x12GetSnapshotRequest\x12\x1d\n" +
	"\n" +
	"table_name\x18\x01 \x01(\tR\ttableName\x12\x1f\n" +
	"\vsnapshot_id\x18\x02 \x01(\tR\n" +
	"snapshotId\"\xa1\x01\n" +
	"\x15ListSnapshotsResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.blackice.v1.StatusR\x06status\x123\n" +
	"\tsnapshots\x18\x02 \x03(\v2\x15.blackice.v1.SnapshotR\tsnapshots\x12&\n" +
	"\x0fnext_page_token\x18\x03 \x01(\tR\rnextPageToken\"\x95\x02\n" +
	"\x14RollbackTableRequest\x12\x1d\n" +
	"\n" +
	"table_name\x18\x01 \x01(\tR\ttableName\x12\x1f\n" +
	"\vbranch_name\x18\x02 \x01(\tR\n" +
	"branchName\x12!\n" +
	"\vsnapshot_id\x18\x03 \x01(\tH\x00R\n" +
	"snapshotId\x121\n" +
	"\x14to_timestamp_unix_ns\x18\x04 \x01(\x03H\x00R\x11toTimestampUnixNs\x12E\n" +
	"\x11admin_attestation\x18\x05 \x01(\v2\x18.blackice.v1.AttestationR\x10adminAttestation\x12\x16\n" +
	"\x06reason\x18\x06 \x01(\tR\x06reasonB\b\n" +
	"\x06target\"\x88\x02\n" +
	"\x06Branch\x12\x1f\n" +
	"\vbranch_name\x18\x01 \x01(\tR\n" +
	"branchName\x12\x1d\n" +
	"\n" +
	"table_name\x18\x02 \x01(\tR\ttableName\x12(\n" +
	"\x10head_snapshot_id\x18\x03 \x01(\tR\x0eheadSnapshotId\x12+\n" +
	"\x12created_at_unix_ns\x18\x04 \x01(\x03R\x0fcreatedAtUnixNs\x12.\n" +
	"\x13created_from_branch\x18\x05 \x01(\tR\x11createdFromBranch\x127\n" +
	"\x18created_from_snapshot_id\x18\x06 \x01(\tR\x15createdFromSnapshotId\"\x83\x02\n" +
	"\x13CreateBranchRequest\x12\x1d\n" +
	"\n" +
	"table_name\x18\x01 \x01(\tR\ttableName\x12&\n" +
	"\x0fnew_branch_name\x18\x02 \x01(\tR\rnewBranchName\x12,\n" +
	"\x12source_branch_name\x18\x03 \x01(\tR\x10sourceBranchName\x12,\n" +
	"\x12source_snapshot_id\x18\x04 \x01(\tR\x10sourceSnapshotId\x12I\n" +
	"\x13creator_attestation\x18\x05 \x01(\v2\x18.blackice.v1.AttestationR\x12creatorAttestation\"j\n" +
	"\x0eBranchResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.blackice.v1.StatusR\x06status\x12+\n" +
	"\x06branch\x18\x02 \x01(\v2\x13.blackice.v1.BranchR\x06branch\"\xf5\x03\n" +
	"\x12MergeBranchRequest\x12\x1d\n" +
	"\n" +
	"table_name\x18\x01 \x01(\tR\ttableName\x12#\n" +
	"\rsource_branch\x18\x02 \x01(\tR\fsourceBranch\x12#\n" +
	"\rtarget_branch\x18\x03 \x01(\tR\ftargetBranch\x12%\n" +
	"\x0ecommit_message\x18\x04 \x01(\tR\rcommitMessage\x12G\n" +
	"\x12merger_attestation\x18\x05 \x01(\v2\x18.blackice.v1.AttestationR\x11mergerAttestation\x12V\n" +
	"\bstrategy\x18\x06 \x01(\x0e2:.blackice.v1.MergeBranchRequest.ConflictResolutionStrategyR\bstrategy\x123\n" +
	"\x16operator_id_for_assist\x18\a \x01(\tR\x13operatorIdForAssist\"y\n" +
	"\x1aConflictResolutionStrategy\x12\x14\n" +
	"\x10FAIL_ON_CONFLICT\x10\x00\x12\x0f\n" +
	"\vSOURCE_WINS\x10\x01\x12\x0f\n" +
	"\vTARGET_WINS\x10\x02\x12#\n" +
	"\x1fTHREE_WAY_MERGE_OPERATOR_ASSIST\x10\x03\"\xb9\x02\n" +
	"\rMergeResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.blackice.v1.StatusR\x06status\x128\n" +
	"\x19new_snapshot_id_on_target\x18\x02 \x01(\tR\x15newSnapshotIdOnTarget\x12-\n" +
	"\x12conflicts_resolved\x18\x03 \x01(\x05R\x11conflictsResolved\x12<\n" +
	"\x1aconflicts_pending_operator\x18\x04 \x01(\x05R\x18conflictsPendingOperator\x12T\n" +
	"\x19ledger_entry_confirmation\x18\x05 \x01(\v2\x18.blackice.v1.LedgerEntryR\x17ledgerEntryConfirmation\"4\n" +
	"\x13ListBranchesRequest\x12\x1d\n" +
	"\n" +
	"table_name\x18\x01 \x01(\tR\ttableName\"t\n" +
	"\x14ListBranchesResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.blackice.v1.StatusR\x06status\x12/\n" +
	"\bbranches\x18\x02 \x03(\v2\x13.blackice.v1.BranchR\bbranches\"o\n" +
	"\x13StorageStatsRequest\x12*\n" +
	"\x11table_name_filter\x18\x01 \x01(\tR\x0ftableNameFilter\x12,\n" +
	"\x12branch_name_filter\x18\x02 \x01(\tR\x10branchNameFilter\"\xc2\x03\n" +
	"\x14StorageStatsResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.blackice.v1.StatusR\x06status\x12!\n" +
	"\ftotal_tables\x18\x02 \x01(\x03R\vtotalTables\x12'\n" +
	"\x0ftotal_snapshots\x18\x03 \x01(\x03R\x0etotalSnapshots\x121\n" +
	"\x15total_data_size_bytes\x18\x04 \x01(\x03R\x12totalDataSizeBytes\x12\\\n" +
	"\x0fper_table_stats\x18\x05 \x03(\v24.blackice.v1.StorageStatsResponse.PerTableStatsEntryR\rperTableStats\x12>\n" +
	"\x0eservice_health\x18\x06 \x01(\v2\x17.blackice.v1.NodeHealthR\rserviceHealth\x1a`\n" +
	"\x12PerTableStatsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x124\n" +
	"\x05value\x18\x02 \x01(\v2\x1e.blackice.v1.TableStorageStatsR\x05value:\x028\x01\"\xde\x01\n" +
	"\x11TableStorageStats\x12\x1d\n" +
	"\n" +
	"table_name\x18\x01 \x01(\tR\ttableName\x12'\n" +
	"\x0fsnapshots_count\x18\x02 \x01(\x03R\x0esnapshotsCount\x12&\n" +
	"\x0fdata_size_bytes\x18\x03 \x01(\x03R\rdataSizeBytes\x122\n" +
	"\x16last_commit_at_unix_ns\x18\x04 \x01(\x03R\x12lastCommitAtUnixNs\x12%\n" +
	"\x0ebranches_count\x18\x05 \x01(\x05R\rbranchesCount\"\xdb\x01\n" +
	"\x1cManageRetentionPolicyRequest\x12\x1d\n" +
	"\n" +
	"table_name\x18\x01 \x01(\tR\ttableName\x12\x1f\n" +
	"\vbranch_name\x18\x02 \x01(\tR\n" +
	"branchName\x124\n" +
	"\x06policy\x18\x03 \x01(\v2\x1c.blackice.v1.RetentionPolicyR\x06policy\x12E\n" +
	"\x11admin_attestation\x18\x04 \x01(\v2\x18.blackice.v1.AttestationR\x10adminAttestation\"\xd4\x02\n" +
	"\x0fRetentionPolicy\x121\n" +
	"\x15keep_min_duration_str\x18\x01 \x01(\tR\x12keepMinDurationStr\x12*\n" +
	"\x11keep_hourly_count\x18\x02 \x01(\x05R\x0fkeepHourlyCount\x12(\n" +
	"\x10keep_daily_count\x18\x03 \x01(\x05R\x0ekeepDailyCount\x12*\n" +
	"\x11keep_weekly_count\x18\x04 \x01(\x05R\x0fkeepWeeklyCount\x12,\n" +
	"\x12keep_monthly_count\x18\x05 \x01(\x05R\x10keepMonthlyCount\x12*\n" +
	"\x11keep_yearly_count\x18\x06 \x01(\x05R\x0fkeepYearlyCount\x122\n" +
	"\x15delete_orphaned_files\x18\a \x01(\bR\x13deleteOrphanedFiles2\xd6\b\n" +
	"\x0eStorageService\x12U\n" +
	"\vCreateTable\x12\x1f.blackice.v1.CreateTableRequest\x1a%.blackice.v1.StorageOperationResponse\x12S\n" +
	"\x0eGetTableSchema\x12\x1c.blackice.v1.GetTableRequest\x1a#.blackice.v1.GetTableSchemaResponse\x12J\n" +
	"\tWriteData\x12\x1d.blackice.v1.WriteDataRequest\x1a\x1e.blackice.v1.WriteDataResponse\x12B\n" +
	"\bReadData\x12\x1c.blackice.v1.ReadDataRequest\x1a\x16.blackice.v1.DataChunk0\x01\x12S\n" +
	"\x0eCreateSnapshot\x12\".blackice.v1.CreateSnapshotRequest\x1a\x1d.blackice.v1.SnapshotResponse\x12M\n" +
	"\vGetSnapshot\x12\x1f.blackice.v1.GetSnapshotRequest\x1a\x1d.blackice.v1.SnapshotResponse\x12V\n" +
	"\rListSnapshots\x12!.blackice.v1.ListSnapshotsRequest\x1a\".blackice.v1.ListSnapshotsResponse\x12Y\n" +
	"\rRollbackTable\x12!.blackice.v1.RollbackTableRequest\x1a%.blackice.v1.StorageOperationResponse\x12M\n" +
	"\fCreateBranch\x12 .blackice.v1.CreateBranchRequest\x1a\x1b.blackice.v1.BranchResponse\x12J\n" +
	"\vMergeBranch\x12\x1f.blackice.v1.MergeBranchRequest\x1a\x1a.blackice.v1.MergeResponse\x12S\n" +
	"\fListBranches\x12 .blackice.v1.ListBranchesRequest\x1a!.blackice.v1.ListBranchesResponse\x12V\n" +
	"\x0fGetStorageStats\x12 .blackice.v1.StorageStatsRequest\x1a!.blackice.v1.StorageStatsResponse\x12i\n" +
	"\x15ManageRetentionPolicy\x12).blackice.v1.ManageRetentionPolicyRequest\x1a%.blackice.v1.StorageOperationResponseB7Z5github.com/TFMV/blackice/proto/blackice/v1;blackicev1b\x06proto3"

var (
	file_blackice_proto_blackice_v1_storage_proto_rawDescOnce sync.Once
	file_blackice_proto_blackice_v1_storage_proto_rawDescData []byte
)

func file_blackice_proto_blackice_v1_storage_proto_rawDescGZIP() []byte {
	file_blackice_proto_blackice_v1_storage_proto_rawDescOnce.Do(func() {
		file_blackice_proto_blackice_v1_storage_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_blackice_proto_blackice_v1_storage_proto_rawDesc), len(file_blackice_proto_blackice_v1_storage_proto_rawDesc)))
	})
	return file_blackice_proto_blackice_v1_storage_proto_rawDescData
}

var file_blackice_proto_blackice_v1_storage_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_blackice_proto_blackice_v1_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_blackice_proto_blackice_v1_storage_proto_goTypes = []any{
	(MergeBranchRequest_ConflictResolutionStrategy)(0), // 0: blackice.v1.MergeBranchRequest.ConflictResolutionStrategy
	(*IcebergSchema)(nil),                              // 1: blackice.v1.IcebergSchema
	(*CreateTableRequest)(nil),                         // 2: blackice.v1.CreateTableRequest
	(*StorageOperationResponse)(nil),                   // 3: blackice.v1.StorageOperationResponse
	(*GetTableRequest)(nil),                            // 4: blackice.v1.GetTableRequest
	(*GetTableSchemaResponse)(nil),                     // 5: blackice.v1.GetTableSchemaResponse
	(*DataFile)(nil),                                   // 6: blackice.v1.DataFile
	(*WriteDataRequest)(nil),                           // 7: blackice.v1.WriteDataRequest
	(*WriteDataResponse)(nil),                          // 8: blackice.v1.WriteDataResponse
	(*ReadDataRequest)(nil),                            // 9: blackice.v1.ReadDataRequest
	(*DataChunk)(nil),                                  // 10: blackice.v1.DataChunk
	(*Snapshot)(nil),                                   // 11: blackice.v1.Snapshot
	(*CreateSnapshotRequest)(nil),                      // 12: blackice.v1.CreateSnapshotRequest
	(*SnapshotResponse)(nil),                           // 13: blackice.v1.SnapshotResponse
	(*ListSnapshotsRequest)(nil),                       // 14: blackice.v1.ListSnapshotsRequest
	(*GetSnapshotRequest)(nil),                         // 15: blackice.v1.GetSnapshotRequest
	(*ListSnapshotsResponse)(nil),                      // 16: blackice.v1.ListSnapshotsResponse
	(*RollbackTableRequest)(nil),                       // 17: blackice.v1.RollbackTableRequest
	(*Branch)(nil),                                     // 18: blackice.v1.Branch
	(*CreateBranchRequest)(nil),                        // 19: blackice.v1.CreateBranchRequest
	(*BranchResponse)(nil),                             // 20: blackice.v1.BranchResponse
	(*MergeBranchRequest)(nil),                         // 21: blackice.v1.MergeBranchRequest
	(*MergeResponse)(nil),                              // 22: blackice.v1.MergeResponse
	(*ListBranchesRequest)(nil),                        // 23: blackice.v1.ListBranchesRequest
	(*ListBranchesResponse)(nil),                       // 24: blackice.v1.ListBranchesResponse
	(*StorageStatsRequest)(nil),                        // 25: blackice.v1.StorageStatsRequest
	(*StorageStatsResponse)(nil),                       // 26: blackice.v1.StorageStatsResponse
	(*TableStorageStats)(nil),                          // 27: blackice.v1.TableStorageStats
	(*ManageRetentionPolicyRequest)(nil),               // 28: blackice.v1.ManageRetentionPolicyRequest
	(*RetentionPolicy)(nil),                            // 29: blackice.v1.RetentionPolicy
	nil,                                                // 30: blackice.v1.CreateTableRequest.TablePropertiesEntry
	nil,                                                // 31: blackice.v1.DataFile.ColumnStatsCborEntry
	nil,                                                // 32: blackice.v1.WriteDataRequest.WritePropertiesEntry
	nil,                                                // 33: blackice.v1.Snapshot.SummaryEntry
	nil,                                                // 34: blackice.v1.StorageStatsResponse.PerTableStatsEntry
	(*Attestation)(nil),                                // 35: blackice.v1.Attestation
	(*Status)(nil),                                     // 36: blackice.v1.Status
	(*LedgerEntry)(nil),                                // 37: blackice.v1.LedgerEntry
	(*NodeHealth)(nil),                                 // 38: blackice.v1.NodeHealth
}
var file_blackice_proto_blackice_v1_storage_proto_depIdxs = []int32{
	1,  // 0: blackice.v1.CreateTableRequest.schema:type_name -> blackice.v1.IcebergSchema
	30, // 1: blackice.v1.CreateTableRequest.table_properties:type_name -> blackice.v1.CreateTableRequest.TablePropertiesEntry
	35, // 2: blackice.v1.CreateTableRequest.admin_attestation:type_name -> blackice.v1.Attestation
	36, // 3: blackice.v1.StorageOperationResponse.status:type_name -> blackice.v1.Status
	37, // 4: blackice.v1.StorageOperationResponse.ledger_entry_confirmation:type_name -> blackice.v1.LedgerEntry
	36, // 5: blackice.v1.GetTableSchemaResponse.status:type_name -> blackice.v1.Status
	1,  // 6: blackice.v1.GetTableSchemaResponse.schema:type_name -> blackice.v1.IcebergSchema
	31, // 7: blackice.v1.DataFile.column_stats_cbor:type_name -> blackice.v1.DataFile.ColumnStatsCborEntry
	6,  // 8: blackice.v1.WriteDataRequest.data_files:type_name -> blackice.v1.DataFile
	35, // 9: blackice.v1.WriteDataRequest.committer_attestation:type_name -> blackice.v1.Attestation
	32, // 10: blackice.v1.WriteDataRequest.write_properties:type_name -> blackice.v1.WriteDataRequest.WritePropertiesEntry
	36, // 11: blackice.v1.WriteDataResponse.status:type_name -> blackice.v1.Status
	37, // 12: blackice.v1.WriteDataResponse.ledger_entry_confirmation:type_name -> blackice.v1.LedgerEntry
	36, // 13: blackice.v1.DataChunk.status:type_name -> blackice.v1.Status
	33, // 14: blackice.v1.Snapshot.summary:type_name -> blackice.v1.Snapshot.SummaryEntry
	35, // 15: blackice.v1.Snapshot.committer_attestation:type_name -> blackice.v1.Attestation
	37, // 16: blackice.v1.Snapshot.ledger_reference:type_name -> blackice.v1.LedgerEntry
	35, // 17: blackice.v1.CreateSnapshotRequest.committer_attestation:type_name -> blackice.v1.Attestation
	36, // 18: blackice.v1.SnapshotResponse.status:type_name -> blackice.v1.Status
	11, // 19: blackice.v1.SnapshotResponse.snapshot:type_name -> blackice.v1.Snapshot
	36, // 20: blackice.v1.ListSnapshotsResponse.status:type_name -> blackice.v1.Status
	11, // 21: blackice.v1.ListSnapshotsResponse.snapshots:type_name -> blackice.v1.Snapshot
	35, // 22: blackice.v1.RollbackTableRequest.admin_attestation:type_name -> blackice.v1.Attestation
	35, // 23: blackice.v1.CreateBranchRequest.creator_attestation:type_name -> blackice.v1.Attestation
	36, // 24: blackice.v1.BranchResponse.status:type_name -> blackice.v1.Status
	18, // 25: blackice.v1.BranchResponse.branch:type_name -> blackice.v1.Branch
	35, // 26: blackice.v1.MergeBranchRequest.merger_attestation:type_name -> blackice.v1.Attestation
	0,  // 27: blackice.v1.MergeBranchRequest.strategy:type_name -> blackice.v1.MergeBranchRequest.ConflictResolutionStrategy
	36, // 28: blackice.v1.MergeResponse.status:type_name -> blackice.v1.Status
	37, // 29: blackice.v1.MergeResponse.ledger_entry_confirmation:type_name -> blackice.v1.LedgerEntry
	36, // 30: blackice.v1.ListBranchesResponse.status:type_name -> blackice.v1.Status
	18, // 31: blackice.v1.ListBranchesResponse.branches:type_name -> blackice.v1.Branch
	36, // 32: blackice.v1.StorageStatsResponse.status:type_name -> blackice.v1.Status
	34, // 33: blackice.v1.StorageStatsResponse.per_table_stats:type_name -> blackice.v1.StorageStatsResponse.PerTableStatsEntry
	38, // 34: blackice.v1.StorageStatsResponse.service_health:type_name -> blackice.v1.NodeHealth
	29, // 35: blackice.v1.ManageRetentionPolicyRequest.policy:type_name -> blackice.v1.RetentionPolicy
	35, // 36: blackice.v1.ManageRetentionPolicyRequest.admin_attestation:type_name -> blackice.v1.Attestation
	27, // 37: blackice.v1.StorageStatsResponse.PerTableStatsEntry.value:type_name -> blackice.v1.TableStorageStats
	2,  // 38: blackice.v1.StorageService.CreateTable:input_type -> blackice.v1.CreateTableRequest
	4,  // 39: blackice.v1.StorageService.GetTableSchema:input_type -> blackice.v1.GetTableRequest
	7,  // 40: blackice.v1.StorageService.WriteData:input_type -> blackice.v1.WriteDataRequest
	9,  // 41: blackice.v1.StorageService.ReadData:input_type -> blackice.v1.ReadDataRequest
	12, // 42: blackice.v1.StorageService.CreateSnapshot:input_type -> blackice.v1.CreateSnapshotRequest
	15, // 43: blackice.v1.StorageService.GetSnapshot:input_type -> blackice.v1.GetSnapshotRequest
	14, // 44: blackice.v1.StorageService.ListSnapshots:input_type -> blackice.v1.ListSnapshotsRequest
	17, // 45: blackice.v1.StorageService.RollbackTable:input_type -> blackice.v1.RollbackTableRequest
	19, // 46: blackice.v1.StorageService.CreateBranch:input_type -> blackice.v1.CreateBranchRequest
	21, // 47: blackice.v1.StorageService.MergeBranch:input_type -> blackice.v1.MergeBranchRequest
	23, // 48: blackice.v1.StorageService.ListBranches:input_type -> blackice.v1.ListBranchesRequest
	25, // 49: blackice.v1.StorageService.GetStorageStats:input_type -> blackice.v1.StorageStatsRequest
	28, // 50: blackice.v1.StorageService.ManageRetentionPolicy:input_type -> blackice.v1.ManageRetentionPolicyRequest
	3,  // 51: blackice.v1.StorageService.CreateTable:output_type -> blackice.v1.StorageOperationResponse
	5,  // 52: blackice.v1.StorageService.GetTableSchema:output_type -> blackice.v1.GetTableSchemaResponse
	8,  // 53: blackice.v1.StorageService.WriteData:output_type -> blackice.v1.WriteDataResponse
	10, // 54: blackice.v1.StorageService.ReadData:output_type -> blackice.v1.DataChunk
	13, // 55: blackice.v1.StorageService.CreateSnapshot:output_type -> blackice.v1.SnapshotResponse
	13, // 56: blackice.v1.StorageService.GetSnapshot:output_type -> blackice.v1.SnapshotResponse
	16, // 57: blackice.v1.StorageService.ListSnapshots:output_type -> blackice.v1.ListSnapshotsResponse
	3,  // 58: blackice.v1.StorageService.RollbackTable:output_type -> blackice.v1.StorageOperationResponse
	20, // 59: blackice.v1.StorageService.CreateBranch:output_type -> blackice.v1.BranchResponse
	22, // 60: blackice.v1.StorageService.MergeBranch:output_type -> blackice.v1.MergeResponse
	24, // 61: blackice.v1.StorageService.ListBranches:output_type -> blackice.v1.ListBranchesResponse
	26, // 62: blackice.v1.StorageService.GetStorageStats:output_type -> blackice.v1.StorageStatsResponse
	3,  // 63: blackice.v1.StorageService.ManageRetentionPolicy:output_type -> blackice.v1.StorageOperationResponse
	51, // [51:64] is the sub-list for method output_type
	38, // [38:51] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_blackice_proto_blackice_v1_storage_proto_init() }
func file_blackice_proto_blackice_v1_storage_proto_init() {
	if File_blackice_proto_blackice_v1_storage_proto != nil {
		return
	}
	file_blackice_proto_blackice_v1_common_proto_init()
	file_blackice_proto_blackice_v1_storage_proto_msgTypes[8].OneofWrappers = []any{
		(*ReadDataRequest_SnapshotId)(nil),
		(*ReadDataRequest_AsOfTimestampUnixNs)(nil),
	}
	file_blackice_proto_blackice_v1_storage_proto_msgTypes[16].OneofWrappers = []any{
		(*RollbackTableRequest_SnapshotId)(nil),
		(*RollbackTableRequest_ToTimestampUnixNs)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_blackice_proto_blackice_v1_storage_proto_rawDesc), len(file_blackice_proto_blackice_v1_storage_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blackice_proto_blackice_v1_storage_proto_goTypes,
		DependencyIndexes: file_blackice_proto_blackice_v1_storage_proto_depIdxs,
		EnumInfos:         file_blackice_proto_blackice_v1_storage_proto_enumTypes,
		MessageInfos:      file_blackice_proto_blackice_v1_storage_proto_msgTypes,
	}.Build()
	File_blackice_proto_blackice_v1_storage_proto = out.File
	file_blackice_proto_blackice_v1_storage_proto_goTypes = nil
	file_blackice_proto_blackice_v1_storage_proto_depIdxs = nil
}
