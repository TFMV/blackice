// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: blackice/proto/blackice/v1/ledger.proto

package blackicev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AppendEntryRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	EntryType          EntryType              `protobuf:"varint,1,opt,name=entry_type,json=entryType,proto3,enum=blackice.v1.EntryType" json:"entry_type,omitempty"`
	Payload            []byte                 `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	PayloadContentType string                 `protobuf:"bytes,3,opt,name=payload_content_type,json=payloadContentType,proto3" json:"payload_content_type,omitempty"`
	// Client can suggest an ID, server may override if not unique or per policy
	ClientProposedEntryId string `protobuf:"bytes,4,opt,name=client_proposed_entry_id,json=clientProposedEntryId,proto3" json:"client_proposed_entry_id,omitempty"`
	// Optional: client-side attestation of the payload before sending
	ClientPayloadAttestation *Attestation `protobuf:"bytes,5,opt,name=client_payload_attestation,json=clientPayloadAttestation,proto3" json:"client_payload_attestation,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *AppendEntryRequest) Reset() {
	*x = AppendEntryRequest{}
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendEntryRequest) ProtoMessage() {}

func (x *AppendEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendEntryRequest.ProtoReflect.Descriptor instead.
func (*AppendEntryRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ledger_proto_rawDescGZIP(), []int{0}
}

func (x *AppendEntryRequest) GetEntryType() EntryType {
	if x != nil {
		return x.EntryType
	}
	return EntryType_ENTRY_TYPE_UNSPECIFIED
}

func (x *AppendEntryRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *AppendEntryRequest) GetPayloadContentType() string {
	if x != nil {
		return x.PayloadContentType
	}
	return ""
}

func (x *AppendEntryRequest) GetClientProposedEntryId() string {
	if x != nil {
		return x.ClientProposedEntryId
	}
	return ""
}

func (x *AppendEntryRequest) GetClientPayloadAttestation() *Attestation {
	if x != nil {
		return x.ClientPayloadAttestation
	}
	return nil
}

type AppendEntryResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Status            *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CommittedEntry    *LedgerEntry           `protobuf:"bytes,2,opt,name=committed_entry,json=committedEntry,proto3" json:"committed_entry,omitempty"`
	ConsensusDecision *QuorumDecision        `protobuf:"bytes,3,opt,name=consensus_decision,json=consensusDecision,proto3" json:"consensus_decision,omitempty"` // Details of the Raft consensus for this append
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AppendEntryResponse) Reset() {
	*x = AppendEntryResponse{}
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendEntryResponse) ProtoMessage() {}

func (x *AppendEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendEntryResponse.ProtoReflect.Descriptor instead.
func (*AppendEntryResponse) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ledger_proto_rawDescGZIP(), []int{1}
}

func (x *AppendEntryResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AppendEntryResponse) GetCommittedEntry() *LedgerEntry {
	if x != nil {
		return x.CommittedEntry
	}
	return nil
}

func (x *AppendEntryResponse) GetConsensusDecision() *QuorumDecision {
	if x != nil {
		return x.ConsensusDecision
	}
	return nil
}

type GetEntryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Identifier:
	//
	//	*GetEntryRequest_EntryIndex
	//	*GetEntryRequest_EntryId
	Identifier         isGetEntryRequest_Identifier `protobuf_oneof:"identifier"`
	IncludeMerkleProof bool                         `protobuf:"varint,3,opt,name=include_merkle_proof,json=includeMerkleProof,proto3" json:"include_merkle_proof,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetEntryRequest) Reset() {
	*x = GetEntryRequest{}
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntryRequest) ProtoMessage() {}

func (x *GetEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntryRequest.ProtoReflect.Descriptor instead.
func (*GetEntryRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ledger_proto_rawDescGZIP(), []int{2}
}

func (x *GetEntryRequest) GetIdentifier() isGetEntryRequest_Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *GetEntryRequest) GetEntryIndex() uint64 {
	if x != nil {
		if x, ok := x.Identifier.(*GetEntryRequest_EntryIndex); ok {
			return x.EntryIndex
		}
	}
	return 0
}

func (x *GetEntryRequest) GetEntryId() string {
	if x != nil {
		if x, ok := x.Identifier.(*GetEntryRequest_EntryId); ok {
			return x.EntryId
		}
	}
	return ""
}

func (x *GetEntryRequest) GetIncludeMerkleProof() bool {
	if x != nil {
		return x.IncludeMerkleProof
	}
	return false
}

type isGetEntryRequest_Identifier interface {
	isGetEntryRequest_Identifier()
}

type GetEntryRequest_EntryIndex struct {
	EntryIndex uint64 `protobuf:"varint,1,opt,name=entry_index,json=entryIndex,proto3,oneof"`
}

type GetEntryRequest_EntryId struct {
	EntryId string `protobuf:"bytes,2,opt,name=entry_id,json=entryId,proto3,oneof"`
}

func (*GetEntryRequest_EntryIndex) isGetEntryRequest_Identifier() {}

func (*GetEntryRequest_EntryId) isGetEntryRequest_Identifier() {}

type GetEntryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Entry         *LedgerEntry           `protobuf:"bytes,2,opt,name=entry,proto3" json:"entry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEntryResponse) Reset() {
	*x = GetEntryResponse{}
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntryResponse) ProtoMessage() {}

func (x *GetEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntryResponse.ProtoReflect.Descriptor instead.
func (*GetEntryResponse) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ledger_proto_rawDescGZIP(), []int{3}
}

func (x *GetEntryResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetEntryResponse) GetEntry() *LedgerEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type GetEntriesRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	StartIndex          uint64                 `protobuf:"varint,1,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	EndIndex            uint64                 `protobuf:"varint,2,opt,name=end_index,json=endIndex,proto3" json:"end_index,omitempty"` // Inclusive
	Limit               int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`                       // Max number of entries to return
	IncludeMerkleProofs bool                   `protobuf:"varint,4,opt,name=include_merkle_proofs,json=includeMerkleProofs,proto3" json:"include_merkle_proofs,omitempty"`
	FilterByType        EntryType              `protobuf:"varint,5,opt,name=filter_by_type,json=filterByType,proto3,enum=blackice.v1.EntryType" json:"filter_by_type,omitempty"` // Optional: filter entries by type
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetEntriesRequest) Reset() {
	*x = GetEntriesRequest{}
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntriesRequest) ProtoMessage() {}

func (x *GetEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntriesRequest.ProtoReflect.Descriptor instead.
func (*GetEntriesRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ledger_proto_rawDescGZIP(), []int{4}
}

func (x *GetEntriesRequest) GetStartIndex() uint64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *GetEntriesRequest) GetEndIndex() uint64 {
	if x != nil {
		return x.EndIndex
	}
	return 0
}

func (x *GetEntriesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetEntriesRequest) GetIncludeMerkleProofs() bool {
	if x != nil {
		return x.IncludeMerkleProofs
	}
	return false
}

func (x *GetEntriesRequest) GetFilterByType() EntryType {
	if x != nil {
		return x.FilterByType
	}
	return EntryType_ENTRY_TYPE_UNSPECIFIED
}

type VerifyEntryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntryToVerify *LedgerEntry           `protobuf:"bytes,1,opt,name=entry_to_verify,json=entryToVerify,proto3" json:"entry_to_verify,omitempty"`
	// If merkle_proof was not included in entry_to_verify, it must be provided here
	ProofOverride *MerkleProof `protobuf:"bytes,2,opt,name=proof_override,json=proofOverride,proto3" json:"proof_override,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyEntryRequest) Reset() {
	*x = VerifyEntryRequest{}
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyEntryRequest) ProtoMessage() {}

func (x *VerifyEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyEntryRequest.ProtoReflect.Descriptor instead.
func (*VerifyEntryRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ledger_proto_rawDescGZIP(), []int{5}
}

func (x *VerifyEntryRequest) GetEntryToVerify() *LedgerEntry {
	if x != nil {
		return x.EntryToVerify
	}
	return nil
}

func (x *VerifyEntryRequest) GetProofOverride() *MerkleProof {
	if x != nil {
		return x.ProofOverride
	}
	return nil
}

type VerificationResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Status              *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	IsValid             bool                   `protobuf:"varint,2,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	VerificationDetails string                 `protobuf:"bytes,3,opt,name=verification_details,json=verificationDetails,proto3" json:"verification_details,omitempty"` // e.g., "Merkle proof matches root hash X"
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *VerificationResponse) Reset() {
	*x = VerificationResponse{}
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationResponse) ProtoMessage() {}

func (x *VerificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationResponse.ProtoReflect.Descriptor instead.
func (*VerificationResponse) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ledger_proto_rawDescGZIP(), []int{6}
}

func (x *VerificationResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *VerificationResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *VerificationResponse) GetVerificationDetails() string {
	if x != nil {
		return x.VerificationDetails
	}
	return ""
}

type LedgerStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LedgerStateRequest) Reset() {
	*x = LedgerStateRequest{}
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LedgerStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerStateRequest) ProtoMessage() {}

func (x *LedgerStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerStateRequest.ProtoReflect.Descriptor instead.
func (*LedgerStateRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ledger_proto_rawDescGZIP(), []int{7}
}

type LedgerStateResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Status             *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CurrentTerm        uint64                 `protobuf:"varint,2,opt,name=current_term,json=currentTerm,proto3" json:"current_term,omitempty"`
	LastCommittedIndex uint64                 `protobuf:"varint,3,opt,name=last_committed_index,json=lastCommittedIndex,proto3" json:"last_committed_index,omitempty"`
	LastAppliedIndex   uint64                 `protobuf:"varint,4,opt,name=last_applied_index,json=lastAppliedIndex,proto3" json:"last_applied_index,omitempty"`
	LeaderId           string                 `protobuf:"bytes,5,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"` // Current Raft leader
	MemberCount        int32                  `protobuf:"varint,6,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`
	MembersHealth      []*NodeHealth          `protobuf:"bytes,7,rep,name=members_health,json=membersHealth,proto3" json:"members_health,omitempty"`
	CurrentRootHash    []byte                 `protobuf:"bytes,8,opt,name=current_root_hash,json=currentRootHash,proto3" json:"current_root_hash,omitempty"` // Current Merkle root of the entire ledger
	LastSnapshotIndex  int64                  `protobuf:"varint,9,opt,name=last_snapshot_index,json=lastSnapshotIndex,proto3" json:"last_snapshot_index,omitempty"`
	LastSnapshotTerm   int64                  `protobuf:"varint,10,opt,name=last_snapshot_term,json=lastSnapshotTerm,proto3" json:"last_snapshot_term,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *LedgerStateResponse) Reset() {
	*x = LedgerStateResponse{}
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LedgerStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerStateResponse) ProtoMessage() {}

func (x *LedgerStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerStateResponse.ProtoReflect.Descriptor instead.
func (*LedgerStateResponse) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ledger_proto_rawDescGZIP(), []int{8}
}

func (x *LedgerStateResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *LedgerStateResponse) GetCurrentTerm() uint64 {
	if x != nil {
		return x.CurrentTerm
	}
	return 0
}

func (x *LedgerStateResponse) GetLastCommittedIndex() uint64 {
	if x != nil {
		return x.LastCommittedIndex
	}
	return 0
}

func (x *LedgerStateResponse) GetLastAppliedIndex() uint64 {
	if x != nil {
		return x.LastAppliedIndex
	}
	return 0
}

func (x *LedgerStateResponse) GetLeaderId() string {
	if x != nil {
		return x.LeaderId
	}
	return ""
}

func (x *LedgerStateResponse) GetMemberCount() int32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *LedgerStateResponse) GetMembersHealth() []*NodeHealth {
	if x != nil {
		return x.MembersHealth
	}
	return nil
}

func (x *LedgerStateResponse) GetCurrentRootHash() []byte {
	if x != nil {
		return x.CurrentRootHash
	}
	return nil
}

func (x *LedgerStateResponse) GetLastSnapshotIndex() int64 {
	if x != nil {
		return x.LastSnapshotIndex
	}
	return 0
}

func (x *LedgerStateResponse) GetLastSnapshotTerm() int64 {
	if x != nil {
		return x.LastSnapshotTerm
	}
	return 0
}

type ForceReSignRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	StartIndex       uint64                 `protobuf:"varint,1,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	EndIndex         uint64                 `protobuf:"varint,2,opt,name=end_index,json=endIndex,proto3" json:"end_index,omitempty"`
	Reason           string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	AdminAttestation *Attestation           `protobuf:"bytes,4,opt,name=admin_attestation,json=adminAttestation,proto3" json:"admin_attestation,omitempty"` // Attestation from admin authorizing this operation
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ForceReSignRequest) Reset() {
	*x = ForceReSignRequest{}
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForceReSignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceReSignRequest) ProtoMessage() {}

func (x *ForceReSignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceReSignRequest.ProtoReflect.Descriptor instead.
func (*ForceReSignRequest) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ledger_proto_rawDescGZIP(), []int{9}
}

func (x *ForceReSignRequest) GetStartIndex() uint64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *ForceReSignRequest) GetEndIndex() uint64 {
	if x != nil {
		return x.EndIndex
	}
	return 0
}

func (x *ForceReSignRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ForceReSignRequest) GetAdminAttestation() *Attestation {
	if x != nil {
		return x.AdminAttestation
	}
	return nil
}

type ForceReSignResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Status               *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EntriesResignedCount uint64                 `protobuf:"varint,2,opt,name=entries_resigned_count,json=entriesResignedCount,proto3" json:"entries_resigned_count,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ForceReSignResponse) Reset() {
	*x = ForceReSignResponse{}
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForceReSignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceReSignResponse) ProtoMessage() {}

func (x *ForceReSignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceReSignResponse.ProtoReflect.Descriptor instead.
func (*ForceReSignResponse) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ledger_proto_rawDescGZIP(), []int{10}
}

func (x *ForceReSignResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ForceReSignResponse) GetEntriesResignedCount() uint64 {
	if x != nil {
		return x.EntriesResignedCount
	}
	return 0
}

type ReplicationAck struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	EntryIndex       uint64                 `protobuf:"varint,1,opt,name=entry_index,json=entryIndex,proto3" json:"entry_index,omitempty"`
	Status           *Status                `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	ReplicatorNodeId string                 `protobuf:"bytes,3,opt,name=replicator_node_id,json=replicatorNodeId,proto3" json:"replicator_node_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ReplicationAck) Reset() {
	*x = ReplicationAck{}
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationAck) ProtoMessage() {}

func (x *ReplicationAck) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationAck.ProtoReflect.Descriptor instead.
func (*ReplicationAck) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ledger_proto_rawDescGZIP(), []int{11}
}

func (x *ReplicationAck) GetEntryIndex() uint64 {
	if x != nil {
		return x.EntryIndex
	}
	return 0
}

func (x *ReplicationAck) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ReplicationAck) GetReplicatorNodeId() string {
	if x != nil {
		return x.ReplicatorNodeId
	}
	return ""
}

// Raft specific messages - Simplified for brevity, real Raft needs more fields.
type RequestVoteArgs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Term          uint64                 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	CandidateId   string                 `protobuf:"bytes,2,opt,name=candidate_id,json=candidateId,proto3" json:"candidate_id,omitempty"`
	LastLogIndex  uint64                 `protobuf:"varint,3,opt,name=last_log_index,json=lastLogIndex,proto3" json:"last_log_index,omitempty"`
	LastLogTerm   uint64                 `protobuf:"varint,4,opt,name=last_log_term,json=lastLogTerm,proto3" json:"last_log_term,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestVoteArgs) Reset() {
	*x = RequestVoteArgs{}
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestVoteArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVoteArgs) ProtoMessage() {}

func (x *RequestVoteArgs) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVoteArgs.ProtoReflect.Descriptor instead.
func (*RequestVoteArgs) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ledger_proto_rawDescGZIP(), []int{12}
}

func (x *RequestVoteArgs) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RequestVoteArgs) GetCandidateId() string {
	if x != nil {
		return x.CandidateId
	}
	return ""
}

func (x *RequestVoteArgs) GetLastLogIndex() uint64 {
	if x != nil {
		return x.LastLogIndex
	}
	return 0
}

func (x *RequestVoteArgs) GetLastLogTerm() uint64 {
	if x != nil {
		return x.LastLogTerm
	}
	return 0
}

type RequestVoteReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Term          uint64                 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	VoteGranted   bool                   `protobuf:"varint,2,opt,name=vote_granted,json=voteGranted,proto3" json:"vote_granted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestVoteReply) Reset() {
	*x = RequestVoteReply{}
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestVoteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVoteReply) ProtoMessage() {}

func (x *RequestVoteReply) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVoteReply.ProtoReflect.Descriptor instead.
func (*RequestVoteReply) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ledger_proto_rawDescGZIP(), []int{13}
}

func (x *RequestVoteReply) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RequestVoteReply) GetVoteGranted() bool {
	if x != nil {
		return x.VoteGranted
	}
	return false
}

type AppendRaftEntriesArgs struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Term              uint64                 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	LeaderId          string                 `protobuf:"bytes,2,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
	PrevLogIndex      uint64                 `protobuf:"varint,3,opt,name=prev_log_index,json=prevLogIndex,proto3" json:"prev_log_index,omitempty"`
	PrevLogTerm       uint64                 `protobuf:"varint,4,opt,name=prev_log_term,json=prevLogTerm,proto3" json:"prev_log_term,omitempty"`
	EntriesToAppend   []*LedgerEntry         `protobuf:"bytes,5,rep,name=entries_to_append,json=entriesToAppend,proto3" json:"entries_to_append,omitempty"` // Can be empty for heartbeats
	LeaderCommitIndex uint64                 `protobuf:"varint,6,opt,name=leader_commit_index,json=leaderCommitIndex,proto3" json:"leader_commit_index,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AppendRaftEntriesArgs) Reset() {
	*x = AppendRaftEntriesArgs{}
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendRaftEntriesArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendRaftEntriesArgs) ProtoMessage() {}

func (x *AppendRaftEntriesArgs) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendRaftEntriesArgs.ProtoReflect.Descriptor instead.
func (*AppendRaftEntriesArgs) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ledger_proto_rawDescGZIP(), []int{14}
}

func (x *AppendRaftEntriesArgs) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *AppendRaftEntriesArgs) GetLeaderId() string {
	if x != nil {
		return x.LeaderId
	}
	return ""
}

func (x *AppendRaftEntriesArgs) GetPrevLogIndex() uint64 {
	if x != nil {
		return x.PrevLogIndex
	}
	return 0
}

func (x *AppendRaftEntriesArgs) GetPrevLogTerm() uint64 {
	if x != nil {
		return x.PrevLogTerm
	}
	return 0
}

func (x *AppendRaftEntriesArgs) GetEntriesToAppend() []*LedgerEntry {
	if x != nil {
		return x.EntriesToAppend
	}
	return nil
}

func (x *AppendRaftEntriesArgs) GetLeaderCommitIndex() uint64 {
	if x != nil {
		return x.LeaderCommitIndex
	}
	return 0
}

type AppendRaftEntriesReply struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Term                uint64                 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	Success             bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	LastReplicatedIndex uint64                 `protobuf:"varint,3,opt,name=last_replicated_index,json=lastReplicatedIndex,proto3" json:"last_replicated_index,omitempty"` // Index up to which replication was successful
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AppendRaftEntriesReply) Reset() {
	*x = AppendRaftEntriesReply{}
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendRaftEntriesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendRaftEntriesReply) ProtoMessage() {}

func (x *AppendRaftEntriesReply) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_ledger_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendRaftEntriesReply.ProtoReflect.Descriptor instead.
func (*AppendRaftEntriesReply) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_ledger_proto_rawDescGZIP(), []int{15}
}

func (x *AppendRaftEntriesReply) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *AppendRaftEntriesReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AppendRaftEntriesReply) GetLastReplicatedIndex() uint64 {
	if x != nil {
		return x.LastReplicatedIndex
	}
	return 0
}

var File_blackice_proto_blackice_v1_ledger_proto protoreflect.FileDescriptor

const file_blackice_proto_blackice_v1_ledger_proto_rawDesc = "" +
	"\n" +
	"'blackice/proto/blackice/v1/ledger.proto\x12\vblackice.v1\x1a'blackice/proto/blackice/v1/common.proto\"\xa8\x02\n" +
	"\x12AppendEntryRequest\x125\n" +
	"\n" +
	"entry_type\x18\x01 \x01(\x0e2\x16.blackice.v1.EntryTypeR\tentryType\x12\x18\n" +
	"\apayload\x18\x02 \x01(\fR\apayload\x120\n" +
	"\x14payload_content_type\x18\x03 \x01(\tR\x12payloadContentType\x127\n" +
	"\x18client_proposed_entry_id\x18\x04 \x01(\tR\x15clientProposedEntryId\x12V\n" +
	"\x1aclient_payload_attestation\x18\x05 \x01(\v2\x18.blackice.v1.AttestationR\x18clientPayloadAttestation\"\xd1\x01\n" +
	"\x13AppendEntryResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.blackice.v1.StatusR\x06status\x12A\n" +
	"\x0fcommitted_entry\x18\x02 \x01(\v2\x18.blackice.v1.LedgerEntryR\x0ecommittedEntry\x12J\n" +
	"\x12consensus_decision\x18\x03 \x01(\v2\x1b.blackice.v1.QuorumDecisionR\x11consensusDecision\"\x91\x01\n" +
	"\x0fGetEntryRequest\x12!\n" +
	"\ventry_index\x18\x01 \x01(\x04H\x00R\n" +
	"entryIndex\x12\x1b\n" +
	"\bentry_id\x18\x02 \x01(\tH\x00R\aentryId\x120\n" +
	"\x14include_merkle_proof\x18\x03 \x01(\bR\x12includeMerkleProofB\f\n" +
	"\n" +
	"identifier\"o\n" +
	"\x10GetEntryResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.blackice.v1.StatusR\x06status\x12.\n" +
	"\x05entry\x18\x02 \x01(\v2\x18.blackice.v1.LedgerEntryR\x05entry\"\xd9\x01\n" +
	"\x11GetEntriesRequest\x12\x1f\n" +
	"\vstart_index\x18\x01 \x01(\x04R\n" +
	"startIndex\x12\x1b\n" +
	"\tend_index\x18\x02 \x01(\x04R\bendIndex\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\x122\n" +
	"\x15include_merkle_proofs\x18\x04 \x01(\bR\x13includeMerkleProofs\x12<\n" +
	"\x0efilter_by_type\x18\x05 \x01(\x0e2\x16.blackice.v1.EntryTypeR\ffilterByType\"\x97\x01\n" +
	"\x12VerifyEntryRequest\x12@\n" +
	"\x0fentry_to_verify\x18\x01 \x01(\v2\x18.blackice.v1.LedgerEntryR\rentryToVerify\x12?\n" +
	"\x0eproof_override\x18\x02 \x01(\v2\x18.blackice.v1.MerkleProofR\rproofOverride\"\x91\x01\n" +
	"\x14VerificationResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.blackice.v1.StatusR\x06status\x12\x19\n" +
	"\bis_valid\x18\x02 \x01(\bR\aisValid\x121\n" +
	"\x14verification_details\x18\x03 \x01(\tR\x13verificationDetails\"\x14\n" +
	"\x12LedgerStateRequest\"\xcf\x03\n" +
	"\x13LedgerStateResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.blackice.v1.StatusR\x06status\x12!\n" +
	"\fcurrent_term\x18\x02 \x01(\x04R\vcurrentTerm\x120\n" +
	"\x14last_committed_index\x18\x03 \x01(\x04R\x12lastCommittedIndex\x12,\n" +
	"\x12last_applied_index\x18\x04 \x01(\x04R\x10lastAppliedIndex\x12\x1b\n" +
	"\tleader_id\x18\x05 \x01(\tR\bleaderId\x12!\n" +
	"\fmember_count\x18\x06 \x01(\x05R\vmemberCount\x12>\n" +
	"\x0emembers_health\x18\a \x03(\v2\x17.blackice.v1.NodeHealthR\rmembersHealth\x12*\n" +
	"\x11current_root_hash\x18\b \x01(\fR\x0fcurrentRootHash\x12.\n" +
	"\x13last_snapshot_index\x18\t \x01(\x03R\x11lastSnapshotIndex\x12,\n" +
	"\x12last_snapshot_term\x18\n" +
	" \x01(\x03R\x10lastSnapshotTerm\"\xb1\x01\n" +
	"\x12ForceReSignRequest\x12\x1f\n" +
	"\vstart_index\x18\x01 \x01(\x04R\n" +
	"startIndex\x12\x1b\n" +
	"\tend_index\x18\x02 \x01(\x04R\bendIndex\x12\x16\n" +
	"\x06reason\x18\x03 \x01(\tR\x06reason\x12E\n" +
	"\x11admin_attestation\x18\x04 \x01(\v2\x18.blackice.v1.AttestationR\x10adminAttestation\"x\n" +
	"\x13ForceReSignResponse\x12+\n" +
	"\x06status\x18\x01 \x01(\v2\x13.blackice.v1.StatusR\x06status\x124\n" +
	"\x16entries_resigned_count\x18\x02 \x01(\x04R\x14entriesResignedCount\"\x8c\x01\n" +
	"\x0eReplicationAck\x12\x1f\n" +
	"\ventry_index\x18\x01 \x01(\x04R\n" +
	"entryIndex\x12+\n" +
	"\x06status\x18\x02 \x01(\v2\x13.blackice.v1.StatusR\x06status\x12,\n" +
	"\x12replicator_node_id\x18\x03 \x01(\tR\x10replicatorNodeId\"\x92\x01\n" +
	"\x0fRequestVoteArgs\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x04R\x04term\x12!\n" +
	"\fcandidate_id\x18\x02 \x01(\tR\vcandidateId\x12$\n" +
	"\x0elast_log_index\x18\x03 \x01(\x04R\flastLogIndex\x12\"\n" +
	"\rlast_log_term\x18\x04 \x01(\x04R\vlastLogTerm\"I\n" +
	"\x10RequestVoteReply\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x04R\x04term\x12!\n" +
	"\fvote_granted\x18\x02 \x01(\bR\vvoteGranted\"\x88\x02\n" +
	"\x15AppendRaftEntriesArgs\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x04R\x04term\x12\x1b\n" +
	"\tleader_id\x18\x02 \x01(\tR\bleaderId\x12$\n" +
	"\x0eprev_log_index\x18\x03 \x01(\x04R\fprevLogIndex\x12\"\n" +
	"\rprev_log_term\x18\x04 \x01(\x04R\vprevLogTerm\x12D\n" +
	"\x11entries_to_append\x18\x05 \x03(\v2\x18.blackice.v1.LedgerEntryR\x0fentriesToAppend\x12.\n" +
	"\x13leader_commit_index\x18\x06 \x01(\x04R\x11leaderCommitIndex\"z\n" +
	"\x16AppendRaftEntriesReply\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x04R\x04term\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x122\n" +
	"\x15last_replicated_index\x18\x03 \x01(\x04R\x13lastReplicatedIndex2\xee\x05\n" +
	"\rLedgerService\x12P\n" +
	"\vAppendEntry\x12\x1f.blackice.v1.AppendEntryRequest\x1a .blackice.v1.AppendEntryResponse\x12G\n" +
	"\bGetEntry\x12\x1c.blackice.v1.GetEntryRequest\x1a\x1d.blackice.v1.GetEntryResponse\x12H\n" +
	"\n" +
	"GetEntries\x12\x1e.blackice.v1.GetEntriesRequest\x1a\x18.blackice.v1.LedgerEntry0\x01\x12Q\n" +
	"\vVerifyEntry\x12\x1f.blackice.v1.VerifyEntryRequest\x1a!.blackice.v1.VerificationResponse\x12S\n" +
	"\x0eGetLedgerState\x12\x1f.blackice.v1.LedgerStateRequest\x1a .blackice.v1.LedgerStateResponse\x12W\n" +
	"\x12ForceReSignEntries\x12\x1f.blackice.v1.ForceReSignRequest\x1a .blackice.v1.ForceReSignResponse\x12M\n" +
	"\x10ReplicateEntries\x12\x18.blackice.v1.LedgerEntry\x1a\x1b.blackice.v1.ReplicationAck(\x010\x01\x12J\n" +
	"\vRequestVote\x12\x1c.blackice.v1.RequestVoteArgs\x1a\x1d.blackice.v1.RequestVoteReply\x12\\\n" +
	"\x11AppendRaftEntries\x12\".blackice.v1.AppendRaftEntriesArgs\x1a#.blackice.v1.AppendRaftEntriesReplyB7Z5github.com/TFMV/blackice/proto/blackice/v1;blackicev1b\x06proto3"

var (
	file_blackice_proto_blackice_v1_ledger_proto_rawDescOnce sync.Once
	file_blackice_proto_blackice_v1_ledger_proto_rawDescData []byte
)

func file_blackice_proto_blackice_v1_ledger_proto_rawDescGZIP() []byte {
	file_blackice_proto_blackice_v1_ledger_proto_rawDescOnce.Do(func() {
		file_blackice_proto_blackice_v1_ledger_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_blackice_proto_blackice_v1_ledger_proto_rawDesc), len(file_blackice_proto_blackice_v1_ledger_proto_rawDesc)))
	})
	return file_blackice_proto_blackice_v1_ledger_proto_rawDescData
}

var file_blackice_proto_blackice_v1_ledger_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_blackice_proto_blackice_v1_ledger_proto_goTypes = []any{
	(*AppendEntryRequest)(nil),     // 0: blackice.v1.AppendEntryRequest
	(*AppendEntryResponse)(nil),    // 1: blackice.v1.AppendEntryResponse
	(*GetEntryRequest)(nil),        // 2: blackice.v1.GetEntryRequest
	(*GetEntryResponse)(nil),       // 3: blackice.v1.GetEntryResponse
	(*GetEntriesRequest)(nil),      // 4: blackice.v1.GetEntriesRequest
	(*VerifyEntryRequest)(nil),     // 5: blackice.v1.VerifyEntryRequest
	(*VerificationResponse)(nil),   // 6: blackice.v1.VerificationResponse
	(*LedgerStateRequest)(nil),     // 7: blackice.v1.LedgerStateRequest
	(*LedgerStateResponse)(nil),    // 8: blackice.v1.LedgerStateResponse
	(*ForceReSignRequest)(nil),     // 9: blackice.v1.ForceReSignRequest
	(*ForceReSignResponse)(nil),    // 10: blackice.v1.ForceReSignResponse
	(*ReplicationAck)(nil),         // 11: blackice.v1.ReplicationAck
	(*RequestVoteArgs)(nil),        // 12: blackice.v1.RequestVoteArgs
	(*RequestVoteReply)(nil),       // 13: blackice.v1.RequestVoteReply
	(*AppendRaftEntriesArgs)(nil),  // 14: blackice.v1.AppendRaftEntriesArgs
	(*AppendRaftEntriesReply)(nil), // 15: blackice.v1.AppendRaftEntriesReply
	(EntryType)(0),                 // 16: blackice.v1.EntryType
	(*Attestation)(nil),            // 17: blackice.v1.Attestation
	(*Status)(nil),                 // 18: blackice.v1.Status
	(*LedgerEntry)(nil),            // 19: blackice.v1.LedgerEntry
	(*QuorumDecision)(nil),         // 20: blackice.v1.QuorumDecision
	(*MerkleProof)(nil),            // 21: blackice.v1.MerkleProof
	(*NodeHealth)(nil),             // 22: blackice.v1.NodeHealth
}
var file_blackice_proto_blackice_v1_ledger_proto_depIdxs = []int32{
	16, // 0: blackice.v1.AppendEntryRequest.entry_type:type_name -> blackice.v1.EntryType
	17, // 1: blackice.v1.AppendEntryRequest.client_payload_attestation:type_name -> blackice.v1.Attestation
	18, // 2: blackice.v1.AppendEntryResponse.status:type_name -> blackice.v1.Status
	19, // 3: blackice.v1.AppendEntryResponse.committed_entry:type_name -> blackice.v1.LedgerEntry
	20, // 4: blackice.v1.AppendEntryResponse.consensus_decision:type_name -> blackice.v1.QuorumDecision
	18, // 5: blackice.v1.GetEntryResponse.status:type_name -> blackice.v1.Status
	19, // 6: blackice.v1.GetEntryResponse.entry:type_name -> blackice.v1.LedgerEntry
	16, // 7: blackice.v1.GetEntriesRequest.filter_by_type:type_name -> blackice.v1.EntryType
	19, // 8: blackice.v1.VerifyEntryRequest.entry_to_verify:type_name -> blackice.v1.LedgerEntry
	21, // 9: blackice.v1.VerifyEntryRequest.proof_override:type_name -> blackice.v1.MerkleProof
	18, // 10: blackice.v1.VerificationResponse.status:type_name -> blackice.v1.Status
	18, // 11: blackice.v1.LedgerStateResponse.status:type_name -> blackice.v1.Status
	22, // 12: blackice.v1.LedgerStateResponse.members_health:type_name -> blackice.v1.NodeHealth
	17, // 13: blackice.v1.ForceReSignRequest.admin_attestation:type_name -> blackice.v1.Attestation
	18, // 14: blackice.v1.ForceReSignResponse.status:type_name -> blackice.v1.Status
	18, // 15: blackice.v1.ReplicationAck.status:type_name -> blackice.v1.Status
	19, // 16: blackice.v1.AppendRaftEntriesArgs.entries_to_append:type_name -> blackice.v1.LedgerEntry
	0,  // 17: blackice.v1.LedgerService.AppendEntry:input_type -> blackice.v1.AppendEntryRequest
	2,  // 18: blackice.v1.LedgerService.GetEntry:input_type -> blackice.v1.GetEntryRequest
	4,  // 19: blackice.v1.LedgerService.GetEntries:input_type -> blackice.v1.GetEntriesRequest
	5,  // 20: blackice.v1.LedgerService.VerifyEntry:input_type -> blackice.v1.VerifyEntryRequest
	7,  // 21: blackice.v1.LedgerService.GetLedgerState:input_type -> blackice.v1.LedgerStateRequest
	9,  // 22: blackice.v1.LedgerService.ForceReSignEntries:input_type -> blackice.v1.ForceReSignRequest
	19, // 23: blackice.v1.LedgerService.ReplicateEntries:input_type -> blackice.v1.LedgerEntry
	12, // 24: blackice.v1.LedgerService.RequestVote:input_type -> blackice.v1.RequestVoteArgs
	14, // 25: blackice.v1.LedgerService.AppendRaftEntries:input_type -> blackice.v1.AppendRaftEntriesArgs
	1,  // 26: blackice.v1.LedgerService.AppendEntry:output_type -> blackice.v1.AppendEntryResponse
	3,  // 27: blackice.v1.LedgerService.GetEntry:output_type -> blackice.v1.GetEntryResponse
	19, // 28: blackice.v1.LedgerService.GetEntries:output_type -> blackice.v1.LedgerEntry
	6,  // 29: blackice.v1.LedgerService.VerifyEntry:output_type -> blackice.v1.VerificationResponse
	8,  // 30: blackice.v1.LedgerService.GetLedgerState:output_type -> blackice.v1.LedgerStateResponse
	10, // 31: blackice.v1.LedgerService.ForceReSignEntries:output_type -> blackice.v1.ForceReSignResponse
	11, // 32: blackice.v1.LedgerService.ReplicateEntries:output_type -> blackice.v1.ReplicationAck
	13, // 33: blackice.v1.LedgerService.RequestVote:output_type -> blackice.v1.RequestVoteReply
	15, // 34: blackice.v1.LedgerService.AppendRaftEntries:output_type -> blackice.v1.AppendRaftEntriesReply
	26, // [26:35] is the sub-list for method output_type
	17, // [17:26] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_blackice_proto_blackice_v1_ledger_proto_init() }
func file_blackice_proto_blackice_v1_ledger_proto_init() {
	if File_blackice_proto_blackice_v1_ledger_proto != nil {
		return
	}
	file_blackice_proto_blackice_v1_common_proto_init()
	file_blackice_proto_blackice_v1_ledger_proto_msgTypes[2].OneofWrappers = []any{
		(*GetEntryRequest_EntryIndex)(nil),
		(*GetEntryRequest_EntryId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_blackice_proto_blackice_v1_ledger_proto_rawDesc), len(file_blackice_proto_blackice_v1_ledger_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blackice_proto_blackice_v1_ledger_proto_goTypes,
		DependencyIndexes: file_blackice_proto_blackice_v1_ledger_proto_depIdxs,
		MessageInfos:      file_blackice_proto_blackice_v1_ledger_proto_msgTypes,
	}.Build()
	File_blackice_proto_blackice_v1_ledger_proto = out.File
	file_blackice_proto_blackice_v1_ledger_proto_goTypes = nil
	file_blackice_proto_blackice_v1_ledger_proto_depIdxs = nil
}
