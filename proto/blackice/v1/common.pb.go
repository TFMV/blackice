// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: blackice/proto/blackice/v1/common.proto

package blackicev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Entry types for the ledger entries
type EntryType int32

const (
	EntryType_ENTRY_TYPE_UNSPECIFIED  EntryType = 0
	EntryType_CONFIGURATION_CHANGE    EntryType = 1
	EntryType_TRUST_SCORE_UPDATE      EntryType = 2
	EntryType_PANIC_EVENT             EntryType = 3
	EntryType_KEY_ROTATION            EntryType = 4
	EntryType_ROLLBACK_OPERATION      EntryType = 5
	EntryType_SECURITY_POLICY_UPDATE  EntryType = 6
	EntryType_NODE_STATE_CHANGE       EntryType = 7
	EntryType_DATA_INGESTION_RECEIPT  EntryType = 8
	EntryType_DATA_STORAGE_COMMIT     EntryType = 9
	EntryType_ACCESS_CONTROL_DECISION EntryType = 10
	EntryType_CHAOS_TEST_RESULT       EntryType = 11
	EntryType_COMPLIANCE_EVENT        EntryType = 12
)

// Enum value maps for EntryType.
var (
	EntryType_name = map[int32]string{
		0:  "ENTRY_TYPE_UNSPECIFIED",
		1:  "CONFIGURATION_CHANGE",
		2:  "TRUST_SCORE_UPDATE",
		3:  "PANIC_EVENT",
		4:  "KEY_ROTATION",
		5:  "ROLLBACK_OPERATION",
		6:  "SECURITY_POLICY_UPDATE",
		7:  "NODE_STATE_CHANGE",
		8:  "DATA_INGESTION_RECEIPT",
		9:  "DATA_STORAGE_COMMIT",
		10: "ACCESS_CONTROL_DECISION",
		11: "CHAOS_TEST_RESULT",
		12: "COMPLIANCE_EVENT",
	}
	EntryType_value = map[string]int32{
		"ENTRY_TYPE_UNSPECIFIED":  0,
		"CONFIGURATION_CHANGE":    1,
		"TRUST_SCORE_UPDATE":      2,
		"PANIC_EVENT":             3,
		"KEY_ROTATION":            4,
		"ROLLBACK_OPERATION":      5,
		"SECURITY_POLICY_UPDATE":  6,
		"NODE_STATE_CHANGE":       7,
		"DATA_INGESTION_RECEIPT":  8,
		"DATA_STORAGE_COMMIT":     9,
		"ACCESS_CONTROL_DECISION": 10,
		"CHAOS_TEST_RESULT":       11,
		"COMPLIANCE_EVENT":        12,
	}
)

func (x EntryType) Enum() *EntryType {
	p := new(EntryType)
	*p = x
	return p
}

func (x EntryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntryType) Descriptor() protoreflect.EnumDescriptor {
	return file_blackice_proto_blackice_v1_common_proto_enumTypes[0].Descriptor()
}

func (EntryType) Type() protoreflect.EnumType {
	return &file_blackice_proto_blackice_v1_common_proto_enumTypes[0]
}

func (x EntryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntryType.Descriptor instead.
func (EntryType) EnumDescriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_common_proto_rawDescGZIP(), []int{0}
}

type Status_Code int32

const (
	Status_OK             Status_Code = 0
	Status_ERROR          Status_Code = 1 // Generic error
	Status_UNAUTHORIZED   Status_Code = 2
	Status_INVALID_INPUT  Status_Code = 3
	Status_NOT_FOUND      Status_Code = 4
	Status_ALREADY_EXISTS Status_Code = 5
	Status_INTERNAL_ERROR Status_Code = 6 // Unspecified internal error
	Status_UNAVAILABLE    Status_Code = 7 // Service temporarily unavailable
	Status_TIMEOUT        Status_Code = 8
	Status_TAMPERED       Status_Code = 9  // Data or request appears to have been tampered with
	Status_COMPROMISED    Status_Code = 10 // Component or system may be compromised
	Status_QUARANTINED    Status_Code = 11 // Component has been quarantined
	Status_DEGRADED       Status_Code = 12 // Service is operating in a degraded state
)

// Enum value maps for Status_Code.
var (
	Status_Code_name = map[int32]string{
		0:  "OK",
		1:  "ERROR",
		2:  "UNAUTHORIZED",
		3:  "INVALID_INPUT",
		4:  "NOT_FOUND",
		5:  "ALREADY_EXISTS",
		6:  "INTERNAL_ERROR",
		7:  "UNAVAILABLE",
		8:  "TIMEOUT",
		9:  "TAMPERED",
		10: "COMPROMISED",
		11: "QUARANTINED",
		12: "DEGRADED",
	}
	Status_Code_value = map[string]int32{
		"OK":             0,
		"ERROR":          1,
		"UNAUTHORIZED":   2,
		"INVALID_INPUT":  3,
		"NOT_FOUND":      4,
		"ALREADY_EXISTS": 5,
		"INTERNAL_ERROR": 6,
		"UNAVAILABLE":    7,
		"TIMEOUT":        8,
		"TAMPERED":       9,
		"COMPROMISED":    10,
		"QUARANTINED":    11,
		"DEGRADED":       12,
	}
)

func (x Status_Code) Enum() *Status_Code {
	p := new(Status_Code)
	*p = x
	return p
}

func (x Status_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_blackice_proto_blackice_v1_common_proto_enumTypes[1].Descriptor()
}

func (Status_Code) Type() protoreflect.EnumType {
	return &file_blackice_proto_blackice_v1_common_proto_enumTypes[1]
}

func (x Status_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status_Code.Descriptor instead.
func (Status_Code) EnumDescriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_common_proto_rawDescGZIP(), []int{0, 0}
}

type Anomaly_Severity int32

const (
	Anomaly_UNKNOWN  Anomaly_Severity = 0
	Anomaly_INFO     Anomaly_Severity = 1
	Anomaly_LOW      Anomaly_Severity = 2
	Anomaly_MEDIUM   Anomaly_Severity = 3
	Anomaly_HIGH     Anomaly_Severity = 4
	Anomaly_CRITICAL Anomaly_Severity = 5
)

// Enum value maps for Anomaly_Severity.
var (
	Anomaly_Severity_name = map[int32]string{
		0: "UNKNOWN",
		1: "INFO",
		2: "LOW",
		3: "MEDIUM",
		4: "HIGH",
		5: "CRITICAL",
	}
	Anomaly_Severity_value = map[string]int32{
		"UNKNOWN":  0,
		"INFO":     1,
		"LOW":      2,
		"MEDIUM":   3,
		"HIGH":     4,
		"CRITICAL": 5,
	}
)

func (x Anomaly_Severity) Enum() *Anomaly_Severity {
	p := new(Anomaly_Severity)
	*p = x
	return p
}

func (x Anomaly_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Anomaly_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_blackice_proto_blackice_v1_common_proto_enumTypes[2].Descriptor()
}

func (Anomaly_Severity) Type() protoreflect.EnumType {
	return &file_blackice_proto_blackice_v1_common_proto_enumTypes[2]
}

func (x Anomaly_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Anomaly_Severity.Descriptor instead.
func (Anomaly_Severity) EnumDescriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_common_proto_rawDescGZIP(), []int{2, 0}
}

type NodeHealth_State int32

const (
	NodeHealth_HEALTHY        NodeHealth_State = 0
	NodeHealth_GUARDED        NodeHealth_State = 1
	NodeHealth_DEGRADED       NodeHealth_State = 2
	NodeHealth_QUARANTINED    NodeHealth_State = 3
	NodeHealth_PANIC          NodeHealth_State = 4
	NodeHealth_ISOLATED       NodeHealth_State = 5 // Edge state
	NodeHealth_REJOIN_PENDING NodeHealth_State = 6 // Edge state
	NodeHealth_RECONCILED     NodeHealth_State = 7 // Edge state
)

// Enum value maps for NodeHealth_State.
var (
	NodeHealth_State_name = map[int32]string{
		0: "HEALTHY",
		1: "GUARDED",
		2: "DEGRADED",
		3: "QUARANTINED",
		4: "PANIC",
		5: "ISOLATED",
		6: "REJOIN_PENDING",
		7: "RECONCILED",
	}
	NodeHealth_State_value = map[string]int32{
		"HEALTHY":        0,
		"GUARDED":        1,
		"DEGRADED":       2,
		"QUARANTINED":    3,
		"PANIC":          4,
		"ISOLATED":       5,
		"REJOIN_PENDING": 6,
		"RECONCILED":     7,
	}
)

func (x NodeHealth_State) Enum() *NodeHealth_State {
	p := new(NodeHealth_State)
	*p = x
	return p
}

func (x NodeHealth_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeHealth_State) Descriptor() protoreflect.EnumDescriptor {
	return file_blackice_proto_blackice_v1_common_proto_enumTypes[3].Descriptor()
}

func (NodeHealth_State) Type() protoreflect.EnumType {
	return &file_blackice_proto_blackice_v1_common_proto_enumTypes[3]
}

func (x NodeHealth_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeHealth_State.Descriptor instead.
func (NodeHealth_State) EnumDescriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_common_proto_rawDescGZIP(), []int{3, 0}
}

type MerkleNode_Position int32

const (
	MerkleNode_LEFT  MerkleNode_Position = 0
	MerkleNode_RIGHT MerkleNode_Position = 1
)

// Enum value maps for MerkleNode_Position.
var (
	MerkleNode_Position_name = map[int32]string{
		0: "LEFT",
		1: "RIGHT",
	}
	MerkleNode_Position_value = map[string]int32{
		"LEFT":  0,
		"RIGHT": 1,
	}
)

func (x MerkleNode_Position) Enum() *MerkleNode_Position {
	p := new(MerkleNode_Position)
	*p = x
	return p
}

func (x MerkleNode_Position) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MerkleNode_Position) Descriptor() protoreflect.EnumDescriptor {
	return file_blackice_proto_blackice_v1_common_proto_enumTypes[4].Descriptor()
}

func (MerkleNode_Position) Type() protoreflect.EnumType {
	return &file_blackice_proto_blackice_v1_common_proto_enumTypes[4]
}

func (x MerkleNode_Position) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MerkleNode_Position.Descriptor instead.
func (MerkleNode_Position) EnumDescriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_common_proto_rawDescGZIP(), []int{8, 0}
}

type CRDTConfig_CRDTType int32

const (
	CRDTConfig_OR_MAP_LWW CRDTConfig_CRDTType = 0 // Observed-Remove Map with Last-Writer-Wins
)

// Enum value maps for CRDTConfig_CRDTType.
var (
	CRDTConfig_CRDTType_name = map[int32]string{
		0: "OR_MAP_LWW",
	}
	CRDTConfig_CRDTType_value = map[string]int32{
		"OR_MAP_LWW": 0,
	}
)

func (x CRDTConfig_CRDTType) Enum() *CRDTConfig_CRDTType {
	p := new(CRDTConfig_CRDTType)
	*p = x
	return p
}

func (x CRDTConfig_CRDTType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CRDTConfig_CRDTType) Descriptor() protoreflect.EnumDescriptor {
	return file_blackice_proto_blackice_v1_common_proto_enumTypes[5].Descriptor()
}

func (CRDTConfig_CRDTType) Type() protoreflect.EnumType {
	return &file_blackice_proto_blackice_v1_common_proto_enumTypes[5]
}

func (x CRDTConfig_CRDTType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CRDTConfig_CRDTType.Descriptor instead.
func (CRDTConfig_CRDTType) EnumDescriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_common_proto_rawDescGZIP(), []int{10, 0}
}

// Common status response for operations
type Status struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          Status_Code            `protobuf:"varint,1,opt,name=code,proto3,enum=blackice.v1.Status_Code" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Details       map[string]string      `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Additional error details
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Status) Reset() {
	*x = Status{}
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_common_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetCode() Status_Code {
	if x != nil {
		return x.Code
	}
	return Status_OK
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Status) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

// Trust score evaluation
type TrustScore struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Score            int32                  `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`                                              // 0-100 trust score
	SourceId         string                 `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`                         // Source identifier (e.g., node_id, user_id, service_id)
	EvaluationId     string                 `protobuf:"bytes,3,opt,name=evaluation_id,json=evaluationId,proto3" json:"evaluation_id,omitempty"`             // Unique evaluation ID
	TimestampUnixNs  int64                  `protobuf:"varint,4,opt,name=timestamp_unix_ns,json=timestampUnixNs,proto3" json:"timestamp_unix_ns,omitempty"` // Evaluation timestamp (Unix time in nanoseconds)
	Anomalies        []*Anomaly             `protobuf:"bytes,5,rep,name=anomalies,proto3" json:"anomalies,omitempty"`                                       // Detected anomalies contributing to this score
	EvaluatorVersion string                 `protobuf:"bytes,6,opt,name=evaluator_version,json=evaluatorVersion,proto3" json:"evaluator_version,omitempty"` // Version of the trust scoring algorithm
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TrustScore) Reset() {
	*x = TrustScore{}
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustScore) ProtoMessage() {}

func (x *TrustScore) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustScore.ProtoReflect.Descriptor instead.
func (*TrustScore) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_common_proto_rawDescGZIP(), []int{1}
}

func (x *TrustScore) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *TrustScore) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *TrustScore) GetEvaluationId() string {
	if x != nil {
		return x.EvaluationId
	}
	return ""
}

func (x *TrustScore) GetTimestampUnixNs() int64 {
	if x != nil {
		return x.TimestampUnixNs
	}
	return 0
}

func (x *TrustScore) GetAnomalies() []*Anomaly {
	if x != nil {
		return x.Anomalies
	}
	return nil
}

func (x *TrustScore) GetEvaluatorVersion() string {
	if x != nil {
		return x.EvaluatorVersion
	}
	return ""
}

// Anomaly detection result
type Anomaly struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Unique anomaly ID
	Description      string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Confidence       float32                `protobuf:"fixed32,3,opt,name=confidence,proto3" json:"confidence,omitempty"`                                                                     // 0-1 confidence score
	DetectedAtUnixNs int64                  `protobuf:"varint,4,opt,name=detected_at_unix_ns,json=detectedAtUnixNs,proto3" json:"detected_at_unix_ns,omitempty"`                              // Detection timestamp (Unix time in nanoseconds)
	DetectorId       string                 `protobuf:"bytes,5,opt,name=detector_id,json=detectorId,proto3" json:"detector_id,omitempty"`                                                     // Identifier of the detector that found this anomaly
	Metadata         map[string]string      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // e.g., specific metrics that triggered it
	Severity         Anomaly_Severity       `protobuf:"varint,7,opt,name=severity,proto3,enum=blackice.v1.Anomaly_Severity" json:"severity,omitempty"`                                        // Severity of the anomaly
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Anomaly) Reset() {
	*x = Anomaly{}
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Anomaly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Anomaly) ProtoMessage() {}

func (x *Anomaly) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Anomaly.ProtoReflect.Descriptor instead.
func (*Anomaly) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_common_proto_rawDescGZIP(), []int{2}
}

func (x *Anomaly) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Anomaly) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Anomaly) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *Anomaly) GetDetectedAtUnixNs() int64 {
	if x != nil {
		return x.DetectedAtUnixNs
	}
	return 0
}

func (x *Anomaly) GetDetectorId() string {
	if x != nil {
		return x.DetectorId
	}
	return ""
}

func (x *Anomaly) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Anomaly) GetSeverity() Anomaly_Severity {
	if x != nil {
		return x.Severity
	}
	return Anomaly_UNKNOWN
}

// Node health status, as defined in requirements section 7.1
type NodeHealth struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	NodeId               string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	State                NodeHealth_State       `protobuf:"varint,2,opt,name=state,proto3,enum=blackice.v1.NodeHealth_State" json:"state,omitempty"`
	StateChangedAtUnixNs int64                  `protobuf:"varint,3,opt,name=state_changed_at_unix_ns,json=stateChangedAtUnixNs,proto3" json:"state_changed_at_unix_ns,omitempty"`              // Timestamp of last state change
	TrustScore           *TrustScore            `protobuf:"bytes,4,opt,name=trust_score,json=trustScore,proto3" json:"trust_score,omitempty"`                                                   // Current trust score of the node
	Metrics              map[string]string      `protobuf:"bytes,5,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Key operational metrics
	Region               string                 `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`                                                                             // Geographic region of the node
	Version              string                 `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`                                                                           // Software version of the node
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NodeHealth) Reset() {
	*x = NodeHealth{}
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHealth) ProtoMessage() {}

func (x *NodeHealth) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHealth.ProtoReflect.Descriptor instead.
func (*NodeHealth) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_common_proto_rawDescGZIP(), []int{3}
}

func (x *NodeHealth) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeHealth) GetState() NodeHealth_State {
	if x != nil {
		return x.State
	}
	return NodeHealth_HEALTHY
}

func (x *NodeHealth) GetStateChangedAtUnixNs() int64 {
	if x != nil {
		return x.StateChangedAtUnixNs
	}
	return 0
}

func (x *NodeHealth) GetTrustScore() *TrustScore {
	if x != nil {
		return x.TrustScore
	}
	return nil
}

func (x *NodeHealth) GetMetrics() map[string]string {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *NodeHealth) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *NodeHealth) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Cryptographic attestation
type Attestation struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                           // Unique attestation ID
	DataHash           []byte                 `protobuf:"bytes,2,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`                               // Hash of the data being attested (e.g., SHA3-256)
	HashAlgorithm      string                 `protobuf:"bytes,3,opt,name=hash_algorithm,json=hashAlgorithm,proto3" json:"hash_algorithm,omitempty"`                // Algorithm used for data_hash
	Signature          []byte                 `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`                                             // Dilithium signature of the data_hash
	SignerId           string                 `protobuf:"bytes,5,opt,name=signer_id,json=signerId,proto3" json:"signer_id,omitempty"`                               // ID of the signer (e.g., node_id, service_id)
	TimestampUnixNs    int64                  `protobuf:"varint,6,opt,name=timestamp_unix_ns,json=timestampUnixNs,proto3" json:"timestamp_unix_ns,omitempty"`       // Timestamp of attestation (Unix time in nanoseconds)
	SignatureAlgorithm string                 `protobuf:"bytes,7,opt,name=signature_algorithm,json=signatureAlgorithm,proto3" json:"signature_algorithm,omitempty"` // Signature algorithm used (e.g., "Dilithium3")
	PqcKemAlgorithm    string                 `protobuf:"bytes,8,opt,name=pqc_kem_algorithm,json=pqcKemAlgorithm,proto3" json:"pqc_kem_algorithm,omitempty"`        // PQC KEM used if key was encapsulated (e.g., "Kyber768")
	KeyRotationId      int64                  `protobuf:"varint,9,opt,name=key_rotation_id,json=keyRotationId,proto3" json:"key_rotation_id,omitempty"`             // Identifier for key rotation cycle
	CertificateChain   []*CertificateInfo     `protobuf:"bytes,10,rep,name=certificate_chain,json=certificateChain,proto3" json:"certificate_chain,omitempty"`      // Certificate chain for the signer
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Attestation) Reset() {
	*x = Attestation{}
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Attestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attestation) ProtoMessage() {}

func (x *Attestation) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attestation.ProtoReflect.Descriptor instead.
func (*Attestation) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_common_proto_rawDescGZIP(), []int{4}
}

func (x *Attestation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Attestation) GetDataHash() []byte {
	if x != nil {
		return x.DataHash
	}
	return nil
}

func (x *Attestation) GetHashAlgorithm() string {
	if x != nil {
		return x.HashAlgorithm
	}
	return ""
}

func (x *Attestation) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Attestation) GetSignerId() string {
	if x != nil {
		return x.SignerId
	}
	return ""
}

func (x *Attestation) GetTimestampUnixNs() int64 {
	if x != nil {
		return x.TimestampUnixNs
	}
	return 0
}

func (x *Attestation) GetSignatureAlgorithm() string {
	if x != nil {
		return x.SignatureAlgorithm
	}
	return ""
}

func (x *Attestation) GetPqcKemAlgorithm() string {
	if x != nil {
		return x.PqcKemAlgorithm
	}
	return ""
}

func (x *Attestation) GetKeyRotationId() int64 {
	if x != nil {
		return x.KeyRotationId
	}
	return 0
}

func (x *Attestation) GetCertificateChain() []*CertificateInfo {
	if x != nil {
		return x.CertificateChain
	}
	return nil
}

// Certificate Information
type CertificateInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CertificateDer  []byte                 `protobuf:"bytes,1,opt,name=certificate_der,json=certificateDer,proto3" json:"certificate_der,omitempty"` // DER-encoded X.509 certificate
	IssuerId        string                 `protobuf:"bytes,2,opt,name=issuer_id,json=issuerId,proto3" json:"issuer_id,omitempty"`
	SubjectId       string                 `protobuf:"bytes,3,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	NotBeforeUnixNs int64                  `protobuf:"varint,4,opt,name=not_before_unix_ns,json=notBeforeUnixNs,proto3" json:"not_before_unix_ns,omitempty"`
	NotAfterUnixNs  int64                  `protobuf:"varint,5,opt,name=not_after_unix_ns,json=notAfterUnixNs,proto3" json:"not_after_unix_ns,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CertificateInfo) Reset() {
	*x = CertificateInfo{}
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateInfo) ProtoMessage() {}

func (x *CertificateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateInfo.ProtoReflect.Descriptor instead.
func (*CertificateInfo) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_common_proto_rawDescGZIP(), []int{5}
}

func (x *CertificateInfo) GetCertificateDer() []byte {
	if x != nil {
		return x.CertificateDer
	}
	return nil
}

func (x *CertificateInfo) GetIssuerId() string {
	if x != nil {
		return x.IssuerId
	}
	return ""
}

func (x *CertificateInfo) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *CertificateInfo) GetNotBeforeUnixNs() int64 {
	if x != nil {
		return x.NotBeforeUnixNs
	}
	return 0
}

func (x *CertificateInfo) GetNotAfterUnixNs() int64 {
	if x != nil {
		return x.NotAfterUnixNs
	}
	return 0
}

// Batch metadata, commonly used in ingestion and storage
type BatchMetadata struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BatchId            string                 `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	SourceId           string                 `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	CreatedAtUnixNs    int64                  `protobuf:"varint,3,opt,name=created_at_unix_ns,json=createdAtUnixNs,proto3" json:"created_at_unix_ns,omitempty"` // Timestamp when batch was created at source
	SizeBytes          int64                  `protobuf:"varint,4,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	ContentType        string                 `protobuf:"bytes,5,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`                                                                                    // e.g., "application/vnd.apache.arrow.flight.stream"
	CustomMetadata     map[string]string      `protobuf:"bytes,6,rep,name=custom_metadata,json=customMetadata,proto3" json:"custom_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // User-defined metadata
	SourceAttestation  *Attestation           `protobuf:"bytes,7,opt,name=source_attestation,json=sourceAttestation,proto3" json:"source_attestation,omitempty"`                                                                  // Attestation from the original source
	PathAttestations   []*Attestation         `protobuf:"bytes,8,rep,name=path_attestations,json=pathAttestations,proto3" json:"path_attestations,omitempty"`                                                                     // Attestations from intermediary nodes
	ArrivalAttestation *Attestation           `protobuf:"bytes,9,opt,name=arrival_attestation,json=arrivalAttestation,proto3" json:"arrival_attestation,omitempty"`                                                               // Attestation upon arrival at BlackIce component
	InitialTrustScore  *TrustScore            `protobuf:"bytes,10,opt,name=initial_trust_score,json=initialTrustScore,proto3" json:"initial_trust_score,omitempty"`                                                               // Trust score assigned at ingestion
	SchemaVersion      string                 `protobuf:"bytes,11,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`                                                                             // Version of the data schema
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BatchMetadata) Reset() {
	*x = BatchMetadata{}
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchMetadata) ProtoMessage() {}

func (x *BatchMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchMetadata.ProtoReflect.Descriptor instead.
func (*BatchMetadata) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_common_proto_rawDescGZIP(), []int{6}
}

func (x *BatchMetadata) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *BatchMetadata) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *BatchMetadata) GetCreatedAtUnixNs() int64 {
	if x != nil {
		return x.CreatedAtUnixNs
	}
	return 0
}

func (x *BatchMetadata) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *BatchMetadata) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *BatchMetadata) GetCustomMetadata() map[string]string {
	if x != nil {
		return x.CustomMetadata
	}
	return nil
}

func (x *BatchMetadata) GetSourceAttestation() *Attestation {
	if x != nil {
		return x.SourceAttestation
	}
	return nil
}

func (x *BatchMetadata) GetPathAttestations() []*Attestation {
	if x != nil {
		return x.PathAttestations
	}
	return nil
}

func (x *BatchMetadata) GetArrivalAttestation() *Attestation {
	if x != nil {
		return x.ArrivalAttestation
	}
	return nil
}

func (x *BatchMetadata) GetInitialTrustScore() *TrustScore {
	if x != nil {
		return x.InitialTrustScore
	}
	return nil
}

func (x *BatchMetadata) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

// Merkle Tree Proof
type MerkleProof struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RootHash      []byte                 `protobuf:"bytes,1,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	Path          []*MerkleNode          `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty"` // Path from leaf to root
	LeafHash      []byte                 `protobuf:"bytes,3,opt,name=leaf_hash,json=leafHash,proto3" json:"leaf_hash,omitempty"`
	HashAlgorithm string                 `protobuf:"bytes,4,opt,name=hash_algorithm,json=hashAlgorithm,proto3" json:"hash_algorithm,omitempty"` // e.g., "SHA3-256"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MerkleProof) Reset() {
	*x = MerkleProof{}
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MerkleProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleProof) ProtoMessage() {}

func (x *MerkleProof) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleProof.ProtoReflect.Descriptor instead.
func (*MerkleProof) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_common_proto_rawDescGZIP(), []int{7}
}

func (x *MerkleProof) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *MerkleProof) GetPath() []*MerkleNode {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *MerkleProof) GetLeafHash() []byte {
	if x != nil {
		return x.LeafHash
	}
	return nil
}

func (x *MerkleProof) GetHashAlgorithm() string {
	if x != nil {
		return x.HashAlgorithm
	}
	return ""
}

type MerkleNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Position      MerkleNode_Position    `protobuf:"varint,2,opt,name=position,proto3,enum=blackice.v1.MerkleNode_Position" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MerkleNode) Reset() {
	*x = MerkleNode{}
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MerkleNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleNode) ProtoMessage() {}

func (x *MerkleNode) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleNode.ProtoReflect.Descriptor instead.
func (*MerkleNode) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_common_proto_rawDescGZIP(), []int{8}
}

func (x *MerkleNode) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *MerkleNode) GetPosition() MerkleNode_Position {
	if x != nil {
		return x.Position
	}
	return MerkleNode_LEFT
}

// Quorum Decision
type QuorumDecision struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	DecisionId           string                 `protobuf:"bytes,1,opt,name=decision_id,json=decisionId,proto3" json:"decision_id,omitempty"`
	Approved             bool                   `protobuf:"varint,2,opt,name=approved,proto3" json:"approved,omitempty"`
	VotesFor             int32                  `protobuf:"varint,3,opt,name=votes_for,json=votesFor,proto3" json:"votes_for,omitempty"`
	VotesAgainst         int32                  `protobuf:"varint,4,opt,name=votes_against,json=votesAgainst,proto3" json:"votes_against,omitempty"`
	TotalVotesPossible   int32                  `protobuf:"varint,5,opt,name=total_votes_possible,json=totalVotesPossible,proto3" json:"total_votes_possible,omitempty"`
	ParticipatingMembers []string               `protobuf:"bytes,6,rep,name=participating_members,json=participatingMembers,proto3" json:"participating_members,omitempty"`
	MemberAttestations   []*Attestation         `protobuf:"bytes,7,rep,name=member_attestations,json=memberAttestations,proto3" json:"member_attestations,omitempty"` // Attestations of each member's vote/input
	DecidedAtUnixNs      int64                  `protobuf:"varint,8,opt,name=decided_at_unix_ns,json=decidedAtUnixNs,proto3" json:"decided_at_unix_ns,omitempty"`
	PolicyVersionUsed    string                 `protobuf:"bytes,9,opt,name=policy_version_used,json=policyVersionUsed,proto3" json:"policy_version_used,omitempty"` // Policy that guided this decision
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *QuorumDecision) Reset() {
	*x = QuorumDecision{}
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuorumDecision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuorumDecision) ProtoMessage() {}

func (x *QuorumDecision) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuorumDecision.ProtoReflect.Descriptor instead.
func (*QuorumDecision) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_common_proto_rawDescGZIP(), []int{9}
}

func (x *QuorumDecision) GetDecisionId() string {
	if x != nil {
		return x.DecisionId
	}
	return ""
}

func (x *QuorumDecision) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

func (x *QuorumDecision) GetVotesFor() int32 {
	if x != nil {
		return x.VotesFor
	}
	return 0
}

func (x *QuorumDecision) GetVotesAgainst() int32 {
	if x != nil {
		return x.VotesAgainst
	}
	return 0
}

func (x *QuorumDecision) GetTotalVotesPossible() int32 {
	if x != nil {
		return x.TotalVotesPossible
	}
	return 0
}

func (x *QuorumDecision) GetParticipatingMembers() []string {
	if x != nil {
		return x.ParticipatingMembers
	}
	return nil
}

func (x *QuorumDecision) GetMemberAttestations() []*Attestation {
	if x != nil {
		return x.MemberAttestations
	}
	return nil
}

func (x *QuorumDecision) GetDecidedAtUnixNs() int64 {
	if x != nil {
		return x.DecidedAtUnixNs
	}
	return 0
}

func (x *QuorumDecision) GetPolicyVersionUsed() string {
	if x != nil {
		return x.PolicyVersionUsed
	}
	return ""
}

// Configuration for a CRDT
type CRDTConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          CRDTConfig_CRDTType    `protobuf:"varint,1,opt,name=type,proto3,enum=blackice.v1.CRDTConfig_CRDTType" json:"type,omitempty"`
	Parameters    map[string]string      `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Type-specific parameters
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRDTConfig) Reset() {
	*x = CRDTConfig{}
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRDTConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRDTConfig) ProtoMessage() {}

func (x *CRDTConfig) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRDTConfig.ProtoReflect.Descriptor instead.
func (*CRDTConfig) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_common_proto_rawDescGZIP(), []int{10}
}

func (x *CRDTConfig) GetType() CRDTConfig_CRDTType {
	if x != nil {
		return x.Type
	}
	return CRDTConfig_OR_MAP_LWW
}

func (x *CRDTConfig) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Tamper-evident ledger entry used across services
type LedgerEntry struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Index              uint64                 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`                                                      // Monotonic index of the entry
	Term               uint64                 `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`                                                        // Raft term in which this entry was committed
	EntryId            string                 `protobuf:"bytes,3,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`                                    // Unique ID for this entry (e.g., UUID)
	EntryType          EntryType              `protobuf:"varint,4,opt,name=entry_type,json=entryType,proto3,enum=blackice.v1.EntryType" json:"entry_type,omitempty"`  // Type of event being logged
	Payload            []byte                 `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`                                                   // The actual data/event payload (e.g., serialized operation details)
	PayloadContentType string                 `protobuf:"bytes,6,opt,name=payload_content_type,json=payloadContentType,proto3" json:"payload_content_type,omitempty"` // MIME type of the payload
	EntryAttestation   *Attestation           `protobuf:"bytes,7,opt,name=entry_attestation,json=entryAttestation,proto3" json:"entry_attestation,omitempty"`         // Attestation of this entry by the committer/leader
	MerkleProof        *MerkleProof           `protobuf:"bytes,8,opt,name=merkle_proof,json=merkleProof,proto3" json:"merkle_proof,omitempty"`                        // Merkle proof for this entry against the current ledger root
	CommittedAtUnixNs  int64                  `protobuf:"varint,9,opt,name=committed_at_unix_ns,json=committedAtUnixNs,proto3" json:"committed_at_unix_ns,omitempty"` // Timestamp of commit
	CommitterNodeId    string                 `protobuf:"bytes,10,opt,name=committer_node_id,json=committerNodeId,proto3" json:"committer_node_id,omitempty"`         // ID of the node that committed this entry
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *LedgerEntry) Reset() {
	*x = LedgerEntry{}
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LedgerEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerEntry) ProtoMessage() {}

func (x *LedgerEntry) ProtoReflect() protoreflect.Message {
	mi := &file_blackice_proto_blackice_v1_common_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerEntry.ProtoReflect.Descriptor instead.
func (*LedgerEntry) Descriptor() ([]byte, []int) {
	return file_blackice_proto_blackice_v1_common_proto_rawDescGZIP(), []int{11}
}

func (x *LedgerEntry) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *LedgerEntry) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *LedgerEntry) GetEntryId() string {
	if x != nil {
		return x.EntryId
	}
	return ""
}

func (x *LedgerEntry) GetEntryType() EntryType {
	if x != nil {
		return x.EntryType
	}
	return EntryType_ENTRY_TYPE_UNSPECIFIED
}

func (x *LedgerEntry) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *LedgerEntry) GetPayloadContentType() string {
	if x != nil {
		return x.PayloadContentType
	}
	return ""
}

func (x *LedgerEntry) GetEntryAttestation() *Attestation {
	if x != nil {
		return x.EntryAttestation
	}
	return nil
}

func (x *LedgerEntry) GetMerkleProof() *MerkleProof {
	if x != nil {
		return x.MerkleProof
	}
	return nil
}

func (x *LedgerEntry) GetCommittedAtUnixNs() int64 {
	if x != nil {
		return x.CommittedAtUnixNs
	}
	return 0
}

func (x *LedgerEntry) GetCommitterNodeId() string {
	if x != nil {
		return x.CommitterNodeId
	}
	return ""
}

var File_blackice_proto_blackice_v1_common_proto protoreflect.FileDescriptor

const file_blackice_proto_blackice_v1_common_proto_rawDesc = "" +
	"\n" +
	"'blackice/proto/blackice/v1/common.proto\x12\vblackice.v1\"\x9c\x03\n" +
	"\x06Status\x12,\n" +
	"\x04code\x18\x01 \x01(\x0e2\x18.blackice.v1.Status.CodeR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12:\n" +
	"\adetails\x18\x03 \x03(\v2 .blackice.v1.Status.DetailsEntryR\adetails\x1a:\n" +
	"\fDetailsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd1\x01\n" +
	"\x04Code\x12\x06\n" +
	"\x02OK\x10\x00\x12\t\n" +
	"\x05ERROR\x10\x01\x12\x10\n" +
	"\fUNAUTHORIZED\x10\x02\x12\x11\n" +
	"\rINVALID_INPUT\x10\x03\x12\r\n" +
	"\tNOT_FOUND\x10\x04\x12\x12\n" +
	"\x0eALREADY_EXISTS\x10\x05\x12\x12\n" +
	"\x0eINTERNAL_ERROR\x10\x06\x12\x0f\n" +
	"\vUNAVAILABLE\x10\a\x12\v\n" +
	"\aTIMEOUT\x10\b\x12\f\n" +
	"\bTAMPERED\x10\t\x12\x0f\n" +
	"\vCOMPROMISED\x10\n" +
	"\x12\x0f\n" +
	"\vQUARANTINED\x10\v\x12\f\n" +
	"\bDEGRADED\x10\f\"\xf1\x01\n" +
	"\n" +
	"TrustScore\x12\x14\n" +
	"\x05score\x18\x01 \x01(\x05R\x05score\x12\x1b\n" +
	"\tsource_id\x18\x02 \x01(\tR\bsourceId\x12#\n" +
	"\revaluation_id\x18\x03 \x01(\tR\fevaluationId\x12*\n" +
	"\x11timestamp_unix_ns\x18\x04 \x01(\x03R\x0ftimestampUnixNs\x122\n" +
	"\tanomalies\x18\x05 \x03(\v2\x14.blackice.v1.AnomalyR\tanomalies\x12+\n" +
	"\x11evaluator_version\x18\x06 \x01(\tR\x10evaluatorVersion\"\xb3\x03\n" +
	"\aAnomaly\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x1e\n" +
	"\n" +
	"confidence\x18\x03 \x01(\x02R\n" +
	"confidence\x12-\n" +
	"\x13detected_at_unix_ns\x18\x04 \x01(\x03R\x10detectedAtUnixNs\x12\x1f\n" +
	"\vdetector_id\x18\x05 \x01(\tR\n" +
	"detectorId\x12>\n" +
	"\bmetadata\x18\x06 \x03(\v2\".blackice.v1.Anomaly.MetadataEntryR\bmetadata\x129\n" +
	"\bseverity\x18\a \x01(\x0e2\x1d.blackice.v1.Anomaly.SeverityR\bseverity\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"N\n" +
	"\bSeverity\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\b\n" +
	"\x04INFO\x10\x01\x12\a\n" +
	"\x03LOW\x10\x02\x12\n" +
	"\n" +
	"\x06MEDIUM\x10\x03\x12\b\n" +
	"\x04HIGH\x10\x04\x12\f\n" +
	"\bCRITICAL\x10\x05\"\xf9\x03\n" +
	"\n" +
	"NodeHealth\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x123\n" +
	"\x05state\x18\x02 \x01(\x0e2\x1d.blackice.v1.NodeHealth.StateR\x05state\x126\n" +
	"\x18state_changed_at_unix_ns\x18\x03 \x01(\x03R\x14stateChangedAtUnixNs\x128\n" +
	"\vtrust_score\x18\x04 \x01(\v2\x17.blackice.v1.TrustScoreR\n" +
	"trustScore\x12>\n" +
	"\ametrics\x18\x05 \x03(\v2$.blackice.v1.NodeHealth.MetricsEntryR\ametrics\x12\x16\n" +
	"\x06region\x18\x06 \x01(\tR\x06region\x12\x18\n" +
	"\aversion\x18\a \x01(\tR\aversion\x1a:\n" +
	"\fMetricsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"}\n" +
	"\x05State\x12\v\n" +
	"\aHEALTHY\x10\x00\x12\v\n" +
	"\aGUARDED\x10\x01\x12\f\n" +
	"\bDEGRADED\x10\x02\x12\x0f\n" +
	"\vQUARANTINED\x10\x03\x12\t\n" +
	"\x05PANIC\x10\x04\x12\f\n" +
	"\bISOLATED\x10\x05\x12\x12\n" +
	"\x0eREJOIN_PENDING\x10\x06\x12\x0e\n" +
	"\n" +
	"RECONCILED\x10\a\"\x98\x03\n" +
	"\vAttestation\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tdata_hash\x18\x02 \x01(\fR\bdataHash\x12%\n" +
	"\x0ehash_algorithm\x18\x03 \x01(\tR\rhashAlgorithm\x12\x1c\n" +
	"\tsignature\x18\x04 \x01(\fR\tsignature\x12\x1b\n" +
	"\tsigner_id\x18\x05 \x01(\tR\bsignerId\x12*\n" +
	"\x11timestamp_unix_ns\x18\x06 \x01(\x03R\x0ftimestampUnixNs\x12/\n" +
	"\x13signature_algorithm\x18\a \x01(\tR\x12signatureAlgorithm\x12*\n" +
	"\x11pqc_kem_algorithm\x18\b \x01(\tR\x0fpqcKemAlgorithm\x12&\n" +
	"\x0fkey_rotation_id\x18\t \x01(\x03R\rkeyRotationId\x12I\n" +
	"\x11certificate_chain\x18\n" +
	" \x03(\v2\x1c.blackice.v1.CertificateInfoR\x10certificateChain\"\xce\x01\n" +
	"\x0fCertificateInfo\x12'\n" +
	"\x0fcertificate_der\x18\x01 \x01(\fR\x0ecertificateDer\x12\x1b\n" +
	"\tissuer_id\x18\x02 \x01(\tR\bissuerId\x12\x1d\n" +
	"\n" +
	"subject_id\x18\x03 \x01(\tR\tsubjectId\x12+\n" +
	"\x12not_before_unix_ns\x18\x04 \x01(\x03R\x0fnotBeforeUnixNs\x12)\n" +
	"\x11not_after_unix_ns\x18\x05 \x01(\x03R\x0enotAfterUnixNs\"\x9d\x05\n" +
	"\rBatchMetadata\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\tR\abatchId\x12\x1b\n" +
	"\tsource_id\x18\x02 \x01(\tR\bsourceId\x12+\n" +
	"\x12created_at_unix_ns\x18\x03 \x01(\x03R\x0fcreatedAtUnixNs\x12\x1d\n" +
	"\n" +
	"size_bytes\x18\x04 \x01(\x03R\tsizeBytes\x12!\n" +
	"\fcontent_type\x18\x05 \x01(\tR\vcontentType\x12W\n" +
	"\x0fcustom_metadata\x18\x06 \x03(\v2..blackice.v1.BatchMetadata.CustomMetadataEntryR\x0ecustomMetadata\x12G\n" +
	"\x12source_attestation\x18\a \x01(\v2\x18.blackice.v1.AttestationR\x11sourceAttestation\x12E\n" +
	"\x11path_attestations\x18\b \x03(\v2\x18.blackice.v1.AttestationR\x10pathAttestations\x12I\n" +
	"\x13arrival_attestation\x18\t \x01(\v2\x18.blackice.v1.AttestationR\x12arrivalAttestation\x12G\n" +
	"\x13initial_trust_score\x18\n" +
	" \x01(\v2\x17.blackice.v1.TrustScoreR\x11initialTrustScore\x12%\n" +
	"\x0eschema_version\x18\v \x01(\tR\rschemaVersion\x1aA\n" +
	"\x13CustomMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x9b\x01\n" +
	"\vMerkleProof\x12\x1b\n" +
	"\troot_hash\x18\x01 \x01(\fR\brootHash\x12+\n" +
	"\x04path\x18\x02 \x03(\v2\x17.blackice.v1.MerkleNodeR\x04path\x12\x1b\n" +
	"\tleaf_hash\x18\x03 \x01(\fR\bleafHash\x12%\n" +
	"\x0ehash_algorithm\x18\x04 \x01(\tR\rhashAlgorithm\"\x7f\n" +
	"\n" +
	"MerkleNode\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\fR\x04hash\x12<\n" +
	"\bposition\x18\x02 \x01(\x0e2 .blackice.v1.MerkleNode.PositionR\bposition\"\x1f\n" +
	"\bPosition\x12\b\n" +
	"\x04LEFT\x10\x00\x12\t\n" +
	"\x05RIGHT\x10\x01\"\x9e\x03\n" +
	"\x0eQuorumDecision\x12\x1f\n" +
	"\vdecision_id\x18\x01 \x01(\tR\n" +
	"decisionId\x12\x1a\n" +
	"\bapproved\x18\x02 \x01(\bR\bapproved\x12\x1b\n" +
	"\tvotes_for\x18\x03 \x01(\x05R\bvotesFor\x12#\n" +
	"\rvotes_against\x18\x04 \x01(\x05R\fvotesAgainst\x120\n" +
	"\x14total_votes_possible\x18\x05 \x01(\x05R\x12totalVotesPossible\x123\n" +
	"\x15participating_members\x18\x06 \x03(\tR\x14participatingMembers\x12I\n" +
	"\x13member_attestations\x18\a \x03(\v2\x18.blackice.v1.AttestationR\x12memberAttestations\x12+\n" +
	"\x12decided_at_unix_ns\x18\b \x01(\x03R\x0fdecidedAtUnixNs\x12.\n" +
	"\x13policy_version_used\x18\t \x01(\tR\x11policyVersionUsed\"\xe6\x01\n" +
	"\n" +
	"CRDTConfig\x124\n" +
	"\x04type\x18\x01 \x01(\x0e2 .blackice.v1.CRDTConfig.CRDTTypeR\x04type\x12G\n" +
	"\n" +
	"parameters\x18\x02 \x03(\v2'.blackice.v1.CRDTConfig.ParametersEntryR\n" +
	"parameters\x1a=\n" +
	"\x0fParametersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x1a\n" +
	"\bCRDTType\x12\x0e\n" +
	"\n" +
	"OR_MAP_LWW\x10\x00\"\xb6\x03\n" +
	"\vLedgerEntry\x12\x14\n" +
	"\x05index\x18\x01 \x01(\x04R\x05index\x12\x12\n" +
	"\x04term\x18\x02 \x01(\x04R\x04term\x12\x19\n" +
	"\bentry_id\x18\x03 \x01(\tR\aentryId\x125\n" +
	"\n" +
	"entry_type\x18\x04 \x01(\x0e2\x16.blackice.v1.EntryTypeR\tentryType\x12\x18\n" +
	"\apayload\x18\x05 \x01(\fR\apayload\x120\n" +
	"\x14payload_content_type\x18\x06 \x01(\tR\x12payloadContentType\x12E\n" +
	"\x11entry_attestation\x18\a \x01(\v2\x18.blackice.v1.AttestationR\x10entryAttestation\x12;\n" +
	"\fmerkle_proof\x18\b \x01(\v2\x18.blackice.v1.MerkleProofR\vmerkleProof\x12/\n" +
	"\x14committed_at_unix_ns\x18\t \x01(\x03R\x11committedAtUnixNs\x12*\n" +
	"\x11committer_node_id\x18\n" +
	" \x01(\tR\x0fcommitterNodeId*\xc6\x02\n" +
	"\tEntryType\x12\x1a\n" +
	"\x16ENTRY_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14CONFIGURATION_CHANGE\x10\x01\x12\x16\n" +
	"\x12TRUST_SCORE_UPDATE\x10\x02\x12\x0f\n" +
	"\vPANIC_EVENT\x10\x03\x12\x10\n" +
	"\fKEY_ROTATION\x10\x04\x12\x16\n" +
	"\x12ROLLBACK_OPERATION\x10\x05\x12\x1a\n" +
	"\x16SECURITY_POLICY_UPDATE\x10\x06\x12\x15\n" +
	"\x11NODE_STATE_CHANGE\x10\a\x12\x1a\n" +
	"\x16DATA_INGESTION_RECEIPT\x10\b\x12\x17\n" +
	"\x13DATA_STORAGE_COMMIT\x10\t\x12\x1b\n" +
	"\x17ACCESS_CONTROL_DECISION\x10\n" +
	"\x12\x15\n" +
	"\x11CHAOS_TEST_RESULT\x10\v\x12\x14\n" +
	"\x10COMPLIANCE_EVENT\x10\fB7Z5github.com/TFMV/blackice/proto/blackice/v1;blackicev1b\x06proto3"

var (
	file_blackice_proto_blackice_v1_common_proto_rawDescOnce sync.Once
	file_blackice_proto_blackice_v1_common_proto_rawDescData []byte
)

func file_blackice_proto_blackice_v1_common_proto_rawDescGZIP() []byte {
	file_blackice_proto_blackice_v1_common_proto_rawDescOnce.Do(func() {
		file_blackice_proto_blackice_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_blackice_proto_blackice_v1_common_proto_rawDesc), len(file_blackice_proto_blackice_v1_common_proto_rawDesc)))
	})
	return file_blackice_proto_blackice_v1_common_proto_rawDescData
}

var file_blackice_proto_blackice_v1_common_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_blackice_proto_blackice_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_blackice_proto_blackice_v1_common_proto_goTypes = []any{
	(EntryType)(0),           // 0: blackice.v1.EntryType
	(Status_Code)(0),         // 1: blackice.v1.Status.Code
	(Anomaly_Severity)(0),    // 2: blackice.v1.Anomaly.Severity
	(NodeHealth_State)(0),    // 3: blackice.v1.NodeHealth.State
	(MerkleNode_Position)(0), // 4: blackice.v1.MerkleNode.Position
	(CRDTConfig_CRDTType)(0), // 5: blackice.v1.CRDTConfig.CRDTType
	(*Status)(nil),           // 6: blackice.v1.Status
	(*TrustScore)(nil),       // 7: blackice.v1.TrustScore
	(*Anomaly)(nil),          // 8: blackice.v1.Anomaly
	(*NodeHealth)(nil),       // 9: blackice.v1.NodeHealth
	(*Attestation)(nil),      // 10: blackice.v1.Attestation
	(*CertificateInfo)(nil),  // 11: blackice.v1.CertificateInfo
	(*BatchMetadata)(nil),    // 12: blackice.v1.BatchMetadata
	(*MerkleProof)(nil),      // 13: blackice.v1.MerkleProof
	(*MerkleNode)(nil),       // 14: blackice.v1.MerkleNode
	(*QuorumDecision)(nil),   // 15: blackice.v1.QuorumDecision
	(*CRDTConfig)(nil),       // 16: blackice.v1.CRDTConfig
	(*LedgerEntry)(nil),      // 17: blackice.v1.LedgerEntry
	nil,                      // 18: blackice.v1.Status.DetailsEntry
	nil,                      // 19: blackice.v1.Anomaly.MetadataEntry
	nil,                      // 20: blackice.v1.NodeHealth.MetricsEntry
	nil,                      // 21: blackice.v1.BatchMetadata.CustomMetadataEntry
	nil,                      // 22: blackice.v1.CRDTConfig.ParametersEntry
}
var file_blackice_proto_blackice_v1_common_proto_depIdxs = []int32{
	1,  // 0: blackice.v1.Status.code:type_name -> blackice.v1.Status.Code
	18, // 1: blackice.v1.Status.details:type_name -> blackice.v1.Status.DetailsEntry
	8,  // 2: blackice.v1.TrustScore.anomalies:type_name -> blackice.v1.Anomaly
	19, // 3: blackice.v1.Anomaly.metadata:type_name -> blackice.v1.Anomaly.MetadataEntry
	2,  // 4: blackice.v1.Anomaly.severity:type_name -> blackice.v1.Anomaly.Severity
	3,  // 5: blackice.v1.NodeHealth.state:type_name -> blackice.v1.NodeHealth.State
	7,  // 6: blackice.v1.NodeHealth.trust_score:type_name -> blackice.v1.TrustScore
	20, // 7: blackice.v1.NodeHealth.metrics:type_name -> blackice.v1.NodeHealth.MetricsEntry
	11, // 8: blackice.v1.Attestation.certificate_chain:type_name -> blackice.v1.CertificateInfo
	21, // 9: blackice.v1.BatchMetadata.custom_metadata:type_name -> blackice.v1.BatchMetadata.CustomMetadataEntry
	10, // 10: blackice.v1.BatchMetadata.source_attestation:type_name -> blackice.v1.Attestation
	10, // 11: blackice.v1.BatchMetadata.path_attestations:type_name -> blackice.v1.Attestation
	10, // 12: blackice.v1.BatchMetadata.arrival_attestation:type_name -> blackice.v1.Attestation
	7,  // 13: blackice.v1.BatchMetadata.initial_trust_score:type_name -> blackice.v1.TrustScore
	14, // 14: blackice.v1.MerkleProof.path:type_name -> blackice.v1.MerkleNode
	4,  // 15: blackice.v1.MerkleNode.position:type_name -> blackice.v1.MerkleNode.Position
	10, // 16: blackice.v1.QuorumDecision.member_attestations:type_name -> blackice.v1.Attestation
	5,  // 17: blackice.v1.CRDTConfig.type:type_name -> blackice.v1.CRDTConfig.CRDTType
	22, // 18: blackice.v1.CRDTConfig.parameters:type_name -> blackice.v1.CRDTConfig.ParametersEntry
	0,  // 19: blackice.v1.LedgerEntry.entry_type:type_name -> blackice.v1.EntryType
	10, // 20: blackice.v1.LedgerEntry.entry_attestation:type_name -> blackice.v1.Attestation
	13, // 21: blackice.v1.LedgerEntry.merkle_proof:type_name -> blackice.v1.MerkleProof
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_blackice_proto_blackice_v1_common_proto_init() }
func file_blackice_proto_blackice_v1_common_proto_init() {
	if File_blackice_proto_blackice_v1_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_blackice_proto_blackice_v1_common_proto_rawDesc), len(file_blackice_proto_blackice_v1_common_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_blackice_proto_blackice_v1_common_proto_goTypes,
		DependencyIndexes: file_blackice_proto_blackice_v1_common_proto_depIdxs,
		EnumInfos:         file_blackice_proto_blackice_v1_common_proto_enumTypes,
		MessageInfos:      file_blackice_proto_blackice_v1_common_proto_msgTypes,
	}.Build()
	File_blackice_proto_blackice_v1_common_proto = out.File
	file_blackice_proto_blackice_v1_common_proto_goTypes = nil
	file_blackice_proto_blackice_v1_common_proto_depIdxs = nil
}
